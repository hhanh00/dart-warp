// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  CResult_u8 c_init_coin(
    int coin,
  ) {
    return _c_init_coin(
      coin,
    );
  }

  late final _c_init_coinPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Uint8)>>(
          'c_init_coin');
  late final _c_init_coin =
      _c_init_coinPtr.asFunction<CResult_u8 Function(int)>();

  CResult______u8 c_list_accounts(
    int coin,
  ) {
    return _c_list_accounts(
      coin,
    );
  }

  late final _c_list_accountsPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Uint8)>>(
          'c_list_accounts');
  late final _c_list_accounts =
      _c_list_accountsPtr.asFunction<CResult______u8 Function(int)>();

  CResult______u8 c_get_balance(
    int coin,
    int account,
    int height,
  ) {
    return _c_get_balance(
      coin,
      account,
      height,
    );
  }

  late final _c_get_balancePtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(
              ffi.Uint8, ffi.Uint32, ffi.Uint32)>>('c_get_balance');
  late final _c_get_balance =
      _c_get_balancePtr.asFunction<CResult______u8 Function(int, int, int)>();

  CResult______u8 c_get_account_property(
    int coin,
    int account,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _c_get_account_property(
      coin,
      account,
      name,
    );
  }

  late final _c_get_account_propertyPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(ffi.Uint8, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('c_get_account_property');
  late final _c_get_account_property = _c_get_account_propertyPtr
      .asFunction<CResult______u8 Function(int, int, ffi.Pointer<ffi.Char>)>();

  CResult_u8 c_set_account_property(
    int coin,
    int account,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Uint8> value,
  ) {
    return _c_set_account_property(
      coin,
      account,
      name,
      value,
    );
  }

  late final _c_set_account_propertyPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Uint8, ffi.Uint32, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>)>>('c_set_account_property');
  late final _c_set_account_property = _c_set_account_propertyPtr.asFunction<
      CResult_u8 Function(
          int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  void c_setup() {
    return _c_setup();
  }

  late final _c_setupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('c_setup');
  late final _c_setup = _c_setupPtr.asFunction<void Function()>();

  CResult_u8 c_test(
    int coin,
    int account,
    ffi.Pointer<ffi.Char> s,
  ) {
    return _c_test(
      coin,
      account,
      s,
    );
  }

  late final _c_testPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(
              ffi.Uint8, ffi.Uint32, ffi.Pointer<ffi.Char>)>>('c_test');
  late final _c_test = _c_testPtr
      .asFunction<CResult_u8 Function(int, int, ffi.Pointer<ffi.Char>)>();
}

final class CResult_u8 extends ffi.Struct {
  @ffi.Uint8()
  external int value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Uint32()
  external int len;
}

final class CResult______u8 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Uint32()
  external int len;
}
