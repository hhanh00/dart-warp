// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library fb;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Backup {
  Backup._(this._bc, this._bcOffset);
  factory Backup(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Backup> reader = _BackupReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get seed => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get index => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  String? get sk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get fvk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get uvk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get tsk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get txsk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  String? get tvk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  String? get taddr => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  int get birth => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 24, 0);
  bool get saved => const fb.BoolReader().vTableGet(_bc, _bcOffset, 26, false);

  @override
  String toString() {
    return 'Backup{name: ${name}, seed: ${seed}, index: ${index}, sk: ${sk}, fvk: ${fvk}, uvk: ${uvk}, tsk: ${tsk}, txsk: ${txsk}, tvk: ${tvk}, taddr: ${taddr}, birth: ${birth}, saved: ${saved}}';
  }

  BackupT unpack() => BackupT(
      name: name,
      seed: seed,
      index: index,
      sk: sk,
      fvk: fvk,
      uvk: uvk,
      tsk: tsk,
      txsk: txsk,
      tvk: tvk,
      taddr: taddr,
      birth: birth,
      saved: saved);

  static int pack(fb.Builder fbBuilder, BackupT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class BackupT implements fb.Packable {
  String? name;
  String? seed;
  int index;
  String? sk;
  String? fvk;
  String? uvk;
  String? tsk;
  String? txsk;
  String? tvk;
  String? taddr;
  int birth;
  bool saved;

  BackupT({
      this.name,
      this.seed,
      this.index = 0,
      this.sk,
      this.fvk,
      this.uvk,
      this.tsk,
      this.txsk,
      this.tvk,
      this.taddr,
      this.birth = 0,
      this.saved = false});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? nameOffset = name == null ? null
        : fbBuilder.writeString(name!);
    final int? seedOffset = seed == null ? null
        : fbBuilder.writeString(seed!);
    final int? skOffset = sk == null ? null
        : fbBuilder.writeString(sk!);
    final int? fvkOffset = fvk == null ? null
        : fbBuilder.writeString(fvk!);
    final int? uvkOffset = uvk == null ? null
        : fbBuilder.writeString(uvk!);
    final int? tskOffset = tsk == null ? null
        : fbBuilder.writeString(tsk!);
    final int? txskOffset = txsk == null ? null
        : fbBuilder.writeString(txsk!);
    final int? tvkOffset = tvk == null ? null
        : fbBuilder.writeString(tvk!);
    final int? taddrOffset = taddr == null ? null
        : fbBuilder.writeString(taddr!);
    fbBuilder.startTable(12);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, seedOffset);
    fbBuilder.addUint32(2, index);
    fbBuilder.addOffset(3, skOffset);
    fbBuilder.addOffset(4, fvkOffset);
    fbBuilder.addOffset(5, uvkOffset);
    fbBuilder.addOffset(6, tskOffset);
    fbBuilder.addOffset(7, txskOffset);
    fbBuilder.addOffset(8, tvkOffset);
    fbBuilder.addOffset(9, taddrOffset);
    fbBuilder.addUint32(10, birth);
    fbBuilder.addBool(11, saved);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'BackupT{name: ${name}, seed: ${seed}, index: ${index}, sk: ${sk}, fvk: ${fvk}, uvk: ${uvk}, tsk: ${tsk}, txsk: ${txsk}, tvk: ${tvk}, taddr: ${taddr}, birth: ${birth}, saved: ${saved}}';
  }
}

class _BackupReader extends fb.TableReader<Backup> {
  const _BackupReader();

  @override
  Backup createObject(fb.BufferContext bc, int offset) => 
    Backup._(bc, offset);
}

class BackupBuilder {
  BackupBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(12);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSeedOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIndex(int? index) {
    fbBuilder.addUint32(2, index);
    return fbBuilder.offset;
  }
  int addSkOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addFvkOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addUvkOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTskOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTxskOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addTvkOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addTaddrOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addBirth(int? birth) {
    fbBuilder.addUint32(10, birth);
    return fbBuilder.offset;
  }
  int addSaved(bool? saved) {
    fbBuilder.addBool(11, saved);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BackupObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _seed;
  final int? _index;
  final String? _sk;
  final String? _fvk;
  final String? _uvk;
  final String? _tsk;
  final String? _txsk;
  final String? _tvk;
  final String? _taddr;
  final int? _birth;
  final bool? _saved;

  BackupObjectBuilder({
    String? name,
    String? seed,
    int? index,
    String? sk,
    String? fvk,
    String? uvk,
    String? tsk,
    String? txsk,
    String? tvk,
    String? taddr,
    int? birth,
    bool? saved,
  })
      : _name = name,
        _seed = seed,
        _index = index,
        _sk = sk,
        _fvk = fvk,
        _uvk = uvk,
        _tsk = tsk,
        _txsk = txsk,
        _tvk = tvk,
        _taddr = taddr,
        _birth = birth,
        _saved = saved;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? seedOffset = _seed == null ? null
        : fbBuilder.writeString(_seed!);
    final int? skOffset = _sk == null ? null
        : fbBuilder.writeString(_sk!);
    final int? fvkOffset = _fvk == null ? null
        : fbBuilder.writeString(_fvk!);
    final int? uvkOffset = _uvk == null ? null
        : fbBuilder.writeString(_uvk!);
    final int? tskOffset = _tsk == null ? null
        : fbBuilder.writeString(_tsk!);
    final int? txskOffset = _txsk == null ? null
        : fbBuilder.writeString(_txsk!);
    final int? tvkOffset = _tvk == null ? null
        : fbBuilder.writeString(_tvk!);
    final int? taddrOffset = _taddr == null ? null
        : fbBuilder.writeString(_taddr!);
    fbBuilder.startTable(12);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, seedOffset);
    fbBuilder.addUint32(2, _index);
    fbBuilder.addOffset(3, skOffset);
    fbBuilder.addOffset(4, fvkOffset);
    fbBuilder.addOffset(5, uvkOffset);
    fbBuilder.addOffset(6, tskOffset);
    fbBuilder.addOffset(7, txskOffset);
    fbBuilder.addOffset(8, tvkOffset);
    fbBuilder.addOffset(9, taddrOffset);
    fbBuilder.addUint32(10, _birth);
    fbBuilder.addBool(11, _saved);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TransactionInfo {
  TransactionInfo._(this._bc, this._bcOffset);
  factory TransactionInfo(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TransactionInfo> reader = _TransactionInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<int>? get txid => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get confirmations => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get amount => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 14, 0);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get contact => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  String? get memo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);

  @override
  String toString() {
    return 'TransactionInfo{id: ${id}, txid: ${txid}, height: ${height}, confirmations: ${confirmations}, timestamp: ${timestamp}, amount: ${amount}, address: ${address}, contact: ${contact}, memo: ${memo}}';
  }

  TransactionInfoT unpack() => TransactionInfoT(
      id: id,
      txid: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 6),
      height: height,
      confirmations: confirmations,
      timestamp: timestamp,
      amount: amount,
      address: address,
      contact: contact,
      memo: memo);

  static int pack(fb.Builder fbBuilder, TransactionInfoT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TransactionInfoT implements fb.Packable {
  int id;
  List<int>? txid;
  int height;
  int confirmations;
  int timestamp;
  int amount;
  String? address;
  String? contact;
  String? memo;

  TransactionInfoT({
      this.id = 0,
      this.txid,
      this.height = 0,
      this.confirmations = 0,
      this.timestamp = 0,
      this.amount = 0,
      this.address,
      this.contact,
      this.memo});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? txidOffset = txid == null ? null
        : fbBuilder.writeListUint8(txid!);
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    final int? contactOffset = contact == null ? null
        : fbBuilder.writeString(contact!);
    final int? memoOffset = memo == null ? null
        : fbBuilder.writeString(memo!);
    fbBuilder.startTable(9);
    fbBuilder.addUint32(0, id);
    fbBuilder.addOffset(1, txidOffset);
    fbBuilder.addUint32(2, height);
    fbBuilder.addUint32(3, confirmations);
    fbBuilder.addUint32(4, timestamp);
    fbBuilder.addInt64(5, amount);
    fbBuilder.addOffset(6, addressOffset);
    fbBuilder.addOffset(7, contactOffset);
    fbBuilder.addOffset(8, memoOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TransactionInfoT{id: ${id}, txid: ${txid}, height: ${height}, confirmations: ${confirmations}, timestamp: ${timestamp}, amount: ${amount}, address: ${address}, contact: ${contact}, memo: ${memo}}';
  }
}

class _TransactionInfoReader extends fb.TableReader<TransactionInfo> {
  const _TransactionInfoReader();

  @override
  TransactionInfo createObject(fb.BufferContext bc, int offset) => 
    TransactionInfo._(bc, offset);
}

class TransactionInfoBuilder {
  TransactionInfoBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(9);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addTxidOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addHeight(int? height) {
    fbBuilder.addUint32(2, height);
    return fbBuilder.offset;
  }
  int addConfirmations(int? confirmations) {
    fbBuilder.addUint32(3, confirmations);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(4, timestamp);
    return fbBuilder.offset;
  }
  int addAmount(int? amount) {
    fbBuilder.addInt64(5, amount);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addContactOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addMemoOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TransactionInfoObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final List<int>? _txid;
  final int? _height;
  final int? _confirmations;
  final int? _timestamp;
  final int? _amount;
  final String? _address;
  final String? _contact;
  final String? _memo;

  TransactionInfoObjectBuilder({
    int? id,
    List<int>? txid,
    int? height,
    int? confirmations,
    int? timestamp,
    int? amount,
    String? address,
    String? contact,
    String? memo,
  })
      : _id = id,
        _txid = txid,
        _height = height,
        _confirmations = confirmations,
        _timestamp = timestamp,
        _amount = amount,
        _address = address,
        _contact = contact,
        _memo = memo;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? txidOffset = _txid == null ? null
        : fbBuilder.writeListUint8(_txid!);
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    final int? contactOffset = _contact == null ? null
        : fbBuilder.writeString(_contact!);
    final int? memoOffset = _memo == null ? null
        : fbBuilder.writeString(_memo!);
    fbBuilder.startTable(9);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addOffset(1, txidOffset);
    fbBuilder.addUint32(2, _height);
    fbBuilder.addUint32(3, _confirmations);
    fbBuilder.addUint32(4, _timestamp);
    fbBuilder.addInt64(5, _amount);
    fbBuilder.addOffset(6, addressOffset);
    fbBuilder.addOffset(7, contactOffset);
    fbBuilder.addOffset(8, memoOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TransactionInfoExtended {
  TransactionInfoExtended._(this._bc, this._bcOffset);
  factory TransactionInfoExtended(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TransactionInfoExtended> reader = _TransactionInfoExtendedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  List<int>? get txid => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);
  List<InputTransparent>? get tins => const fb.ListReader<InputTransparent>(InputTransparent.reader).vTableGetNullable(_bc, _bcOffset, 10);
  List<OutputTransparent>? get touts => const fb.ListReader<OutputTransparent>(OutputTransparent.reader).vTableGetNullable(_bc, _bcOffset, 12);
  List<InputShielded>? get sins => const fb.ListReader<InputShielded>(InputShielded.reader).vTableGetNullable(_bc, _bcOffset, 14);
  List<OutputShielded>? get souts => const fb.ListReader<OutputShielded>(OutputShielded.reader).vTableGetNullable(_bc, _bcOffset, 16);
  List<InputShielded>? get oins => const fb.ListReader<InputShielded>(InputShielded.reader).vTableGetNullable(_bc, _bcOffset, 18);
  List<OutputShielded>? get oouts => const fb.ListReader<OutputShielded>(OutputShielded.reader).vTableGetNullable(_bc, _bcOffset, 20);

  @override
  String toString() {
    return 'TransactionInfoExtended{height: ${height}, timestamp: ${timestamp}, txid: ${txid}, tins: ${tins}, touts: ${touts}, sins: ${sins}, souts: ${souts}, oins: ${oins}, oouts: ${oouts}}';
  }

  TransactionInfoExtendedT unpack() => TransactionInfoExtendedT(
      height: height,
      timestamp: timestamp,
      txid: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 8),
      tins: tins?.map((e) => e.unpack()).toList(),
      touts: touts?.map((e) => e.unpack()).toList(),
      sins: sins?.map((e) => e.unpack()).toList(),
      souts: souts?.map((e) => e.unpack()).toList(),
      oins: oins?.map((e) => e.unpack()).toList(),
      oouts: oouts?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, TransactionInfoExtendedT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TransactionInfoExtendedT implements fb.Packable {
  int height;
  int timestamp;
  List<int>? txid;
  List<InputTransparentT>? tins;
  List<OutputTransparentT>? touts;
  List<InputShieldedT>? sins;
  List<OutputShieldedT>? souts;
  List<InputShieldedT>? oins;
  List<OutputShieldedT>? oouts;

  TransactionInfoExtendedT({
      this.height = 0,
      this.timestamp = 0,
      this.txid,
      this.tins,
      this.touts,
      this.sins,
      this.souts,
      this.oins,
      this.oouts});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? txidOffset = txid == null ? null
        : fbBuilder.writeListUint8(txid!);
    final int? tinsOffset = tins == null ? null
        : fbBuilder.writeList(tins!.map((b) => b.pack(fbBuilder)).toList());
    final int? toutsOffset = touts == null ? null
        : fbBuilder.writeList(touts!.map((b) => b.pack(fbBuilder)).toList());
    final int? sinsOffset = sins == null ? null
        : fbBuilder.writeList(sins!.map((b) => b.pack(fbBuilder)).toList());
    final int? soutsOffset = souts == null ? null
        : fbBuilder.writeList(souts!.map((b) => b.pack(fbBuilder)).toList());
    final int? oinsOffset = oins == null ? null
        : fbBuilder.writeList(oins!.map((b) => b.pack(fbBuilder)).toList());
    final int? ooutsOffset = oouts == null ? null
        : fbBuilder.writeList(oouts!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(9);
    fbBuilder.addUint32(0, height);
    fbBuilder.addUint32(1, timestamp);
    fbBuilder.addOffset(2, txidOffset);
    fbBuilder.addOffset(3, tinsOffset);
    fbBuilder.addOffset(4, toutsOffset);
    fbBuilder.addOffset(5, sinsOffset);
    fbBuilder.addOffset(6, soutsOffset);
    fbBuilder.addOffset(7, oinsOffset);
    fbBuilder.addOffset(8, ooutsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TransactionInfoExtendedT{height: ${height}, timestamp: ${timestamp}, txid: ${txid}, tins: ${tins}, touts: ${touts}, sins: ${sins}, souts: ${souts}, oins: ${oins}, oouts: ${oouts}}';
  }
}

class _TransactionInfoExtendedReader extends fb.TableReader<TransactionInfoExtended> {
  const _TransactionInfoExtendedReader();

  @override
  TransactionInfoExtended createObject(fb.BufferContext bc, int offset) => 
    TransactionInfoExtended._(bc, offset);
}

class TransactionInfoExtendedBuilder {
  TransactionInfoExtendedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(9);
  }

  int addHeight(int? height) {
    fbBuilder.addUint32(0, height);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(1, timestamp);
    return fbBuilder.offset;
  }
  int addTxidOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTinsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addToutsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addSinsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSoutsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addOinsOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOoutsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TransactionInfoExtendedObjectBuilder extends fb.ObjectBuilder {
  final int? _height;
  final int? _timestamp;
  final List<int>? _txid;
  final List<InputTransparentObjectBuilder>? _tins;
  final List<OutputTransparentObjectBuilder>? _touts;
  final List<InputShieldedObjectBuilder>? _sins;
  final List<OutputShieldedObjectBuilder>? _souts;
  final List<InputShieldedObjectBuilder>? _oins;
  final List<OutputShieldedObjectBuilder>? _oouts;

  TransactionInfoExtendedObjectBuilder({
    int? height,
    int? timestamp,
    List<int>? txid,
    List<InputTransparentObjectBuilder>? tins,
    List<OutputTransparentObjectBuilder>? touts,
    List<InputShieldedObjectBuilder>? sins,
    List<OutputShieldedObjectBuilder>? souts,
    List<InputShieldedObjectBuilder>? oins,
    List<OutputShieldedObjectBuilder>? oouts,
  })
      : _height = height,
        _timestamp = timestamp,
        _txid = txid,
        _tins = tins,
        _touts = touts,
        _sins = sins,
        _souts = souts,
        _oins = oins,
        _oouts = oouts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? txidOffset = _txid == null ? null
        : fbBuilder.writeListUint8(_txid!);
    final int? tinsOffset = _tins == null ? null
        : fbBuilder.writeList(_tins!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? toutsOffset = _touts == null ? null
        : fbBuilder.writeList(_touts!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? sinsOffset = _sins == null ? null
        : fbBuilder.writeList(_sins!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? soutsOffset = _souts == null ? null
        : fbBuilder.writeList(_souts!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? oinsOffset = _oins == null ? null
        : fbBuilder.writeList(_oins!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? ooutsOffset = _oouts == null ? null
        : fbBuilder.writeList(_oouts!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(9);
    fbBuilder.addUint32(0, _height);
    fbBuilder.addUint32(1, _timestamp);
    fbBuilder.addOffset(2, txidOffset);
    fbBuilder.addOffset(3, tinsOffset);
    fbBuilder.addOffset(4, toutsOffset);
    fbBuilder.addOffset(5, sinsOffset);
    fbBuilder.addOffset(6, soutsOffset);
    fbBuilder.addOffset(7, oinsOffset);
    fbBuilder.addOffset(8, ooutsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class InputTransparent {
  InputTransparent._(this._bc, this._bcOffset);
  factory InputTransparent(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<InputTransparent> reader = _InputTransparentReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get txid => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get vout => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  int get value => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'InputTransparent{txid: ${txid}, vout: ${vout}, address: ${address}, value: ${value}}';
  }

  InputTransparentT unpack() => InputTransparentT(
      txid: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 4),
      vout: vout,
      address: address,
      value: value);

  static int pack(fb.Builder fbBuilder, InputTransparentT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class InputTransparentT implements fb.Packable {
  List<int>? txid;
  int vout;
  String? address;
  int value;

  InputTransparentT({
      this.txid,
      this.vout = 0,
      this.address,
      this.value = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? txidOffset = txid == null ? null
        : fbBuilder.writeListUint8(txid!);
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, txidOffset);
    fbBuilder.addUint32(1, vout);
    fbBuilder.addOffset(2, addressOffset);
    fbBuilder.addUint64(3, value);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'InputTransparentT{txid: ${txid}, vout: ${vout}, address: ${address}, value: ${value}}';
  }
}

class _InputTransparentReader extends fb.TableReader<InputTransparent> {
  const _InputTransparentReader();

  @override
  InputTransparent createObject(fb.BufferContext bc, int offset) => 
    InputTransparent._(bc, offset);
}

class InputTransparentBuilder {
  InputTransparentBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTxidOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVout(int? vout) {
    fbBuilder.addUint32(1, vout);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addValue(int? value) {
    fbBuilder.addUint64(3, value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class InputTransparentObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _txid;
  final int? _vout;
  final String? _address;
  final int? _value;

  InputTransparentObjectBuilder({
    List<int>? txid,
    int? vout,
    String? address,
    int? value,
  })
      : _txid = txid,
        _vout = vout,
        _address = address,
        _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? txidOffset = _txid == null ? null
        : fbBuilder.writeListUint8(_txid!);
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, txidOffset);
    fbBuilder.addUint32(1, _vout);
    fbBuilder.addOffset(2, addressOffset);
    fbBuilder.addUint64(3, _value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OutputTransparent {
  OutputTransparent._(this._bc, this._bcOffset);
  factory OutputTransparent(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OutputTransparent> reader = _OutputTransparentReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get value => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'OutputTransparent{address: ${address}, value: ${value}}';
  }

  OutputTransparentT unpack() => OutputTransparentT(
      address: address,
      value: value);

  static int pack(fb.Builder fbBuilder, OutputTransparentT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class OutputTransparentT implements fb.Packable {
  String? address;
  int value;

  OutputTransparentT({
      this.address,
      this.value = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, addressOffset);
    fbBuilder.addUint64(1, value);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'OutputTransparentT{address: ${address}, value: ${value}}';
  }
}

class _OutputTransparentReader extends fb.TableReader<OutputTransparent> {
  const _OutputTransparentReader();

  @override
  OutputTransparent createObject(fb.BufferContext bc, int offset) => 
    OutputTransparent._(bc, offset);
}

class OutputTransparentBuilder {
  OutputTransparentBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addValue(int? value) {
    fbBuilder.addUint64(1, value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OutputTransparentObjectBuilder extends fb.ObjectBuilder {
  final String? _address;
  final int? _value;

  OutputTransparentObjectBuilder({
    String? address,
    int? value,
  })
      : _address = address,
        _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, addressOffset);
    fbBuilder.addUint64(1, _value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class InputShielded {
  InputShielded._(this._bc, this._bcOffset);
  factory InputShielded(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<InputShielded> reader = _InputShieldedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get nf => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get value => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  List<int>? get rcm => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 10);
  List<int>? get rho => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'InputShielded{nf: ${nf}, address: ${address}, value: ${value}, rcm: ${rcm}, rho: ${rho}}';
  }

  InputShieldedT unpack() => InputShieldedT(
      nf: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 4),
      address: address,
      value: value,
      rcm: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 10),
      rho: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 12));

  static int pack(fb.Builder fbBuilder, InputShieldedT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class InputShieldedT implements fb.Packable {
  List<int>? nf;
  String? address;
  int value;
  List<int>? rcm;
  List<int>? rho;

  InputShieldedT({
      this.nf,
      this.address,
      this.value = 0,
      this.rcm,
      this.rho});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? nfOffset = nf == null ? null
        : fbBuilder.writeListUint8(nf!);
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    final int? rcmOffset = rcm == null ? null
        : fbBuilder.writeListUint8(rcm!);
    final int? rhoOffset = rho == null ? null
        : fbBuilder.writeListUint8(rho!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, nfOffset);
    fbBuilder.addOffset(1, addressOffset);
    fbBuilder.addUint64(2, value);
    fbBuilder.addOffset(3, rcmOffset);
    fbBuilder.addOffset(4, rhoOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'InputShieldedT{nf: ${nf}, address: ${address}, value: ${value}, rcm: ${rcm}, rho: ${rho}}';
  }
}

class _InputShieldedReader extends fb.TableReader<InputShielded> {
  const _InputShieldedReader();

  @override
  InputShielded createObject(fb.BufferContext bc, int offset) => 
    InputShielded._(bc, offset);
}

class InputShieldedBuilder {
  InputShieldedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addNfOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addValue(int? value) {
    fbBuilder.addUint64(2, value);
    return fbBuilder.offset;
  }
  int addRcmOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addRhoOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class InputShieldedObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _nf;
  final String? _address;
  final int? _value;
  final List<int>? _rcm;
  final List<int>? _rho;

  InputShieldedObjectBuilder({
    List<int>? nf,
    String? address,
    int? value,
    List<int>? rcm,
    List<int>? rho,
  })
      : _nf = nf,
        _address = address,
        _value = value,
        _rcm = rcm,
        _rho = rho;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nfOffset = _nf == null ? null
        : fbBuilder.writeListUint8(_nf!);
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    final int? rcmOffset = _rcm == null ? null
        : fbBuilder.writeListUint8(_rcm!);
    final int? rhoOffset = _rho == null ? null
        : fbBuilder.writeListUint8(_rho!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, nfOffset);
    fbBuilder.addOffset(1, addressOffset);
    fbBuilder.addUint64(2, _value);
    fbBuilder.addOffset(3, rcmOffset);
    fbBuilder.addOffset(4, rhoOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OutputShielded {
  OutputShielded._(this._bc, this._bcOffset);
  factory OutputShielded(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OutputShielded> reader = _OutputShieldedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get incoming => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  List<int>? get cmx => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  int get value => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 10, 0);
  List<int>? get rcm => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 12);
  List<int>? get rho => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get memo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'OutputShielded{incoming: ${incoming}, cmx: ${cmx}, address: ${address}, value: ${value}, rcm: ${rcm}, rho: ${rho}, memo: ${memo}}';
  }

  OutputShieldedT unpack() => OutputShieldedT(
      incoming: incoming,
      cmx: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 6),
      address: address,
      value: value,
      rcm: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 12),
      rho: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 14),
      memo: memo);

  static int pack(fb.Builder fbBuilder, OutputShieldedT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class OutputShieldedT implements fb.Packable {
  bool incoming;
  List<int>? cmx;
  String? address;
  int value;
  List<int>? rcm;
  List<int>? rho;
  String? memo;

  OutputShieldedT({
      this.incoming = false,
      this.cmx,
      this.address,
      this.value = 0,
      this.rcm,
      this.rho,
      this.memo});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? cmxOffset = cmx == null ? null
        : fbBuilder.writeListUint8(cmx!);
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    final int? rcmOffset = rcm == null ? null
        : fbBuilder.writeListUint8(rcm!);
    final int? rhoOffset = rho == null ? null
        : fbBuilder.writeListUint8(rho!);
    final int? memoOffset = memo == null ? null
        : fbBuilder.writeString(memo!);
    fbBuilder.startTable(7);
    fbBuilder.addBool(0, incoming);
    fbBuilder.addOffset(1, cmxOffset);
    fbBuilder.addOffset(2, addressOffset);
    fbBuilder.addUint64(3, value);
    fbBuilder.addOffset(4, rcmOffset);
    fbBuilder.addOffset(5, rhoOffset);
    fbBuilder.addOffset(6, memoOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'OutputShieldedT{incoming: ${incoming}, cmx: ${cmx}, address: ${address}, value: ${value}, rcm: ${rcm}, rho: ${rho}, memo: ${memo}}';
  }
}

class _OutputShieldedReader extends fb.TableReader<OutputShielded> {
  const _OutputShieldedReader();

  @override
  OutputShielded createObject(fb.BufferContext bc, int offset) => 
    OutputShielded._(bc, offset);
}

class OutputShieldedBuilder {
  OutputShieldedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addIncoming(bool? incoming) {
    fbBuilder.addBool(0, incoming);
    return fbBuilder.offset;
  }
  int addCmxOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addValue(int? value) {
    fbBuilder.addUint64(3, value);
    return fbBuilder.offset;
  }
  int addRcmOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addRhoOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addMemoOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OutputShieldedObjectBuilder extends fb.ObjectBuilder {
  final bool? _incoming;
  final List<int>? _cmx;
  final String? _address;
  final int? _value;
  final List<int>? _rcm;
  final List<int>? _rho;
  final String? _memo;

  OutputShieldedObjectBuilder({
    bool? incoming,
    List<int>? cmx,
    String? address,
    int? value,
    List<int>? rcm,
    List<int>? rho,
    String? memo,
  })
      : _incoming = incoming,
        _cmx = cmx,
        _address = address,
        _value = value,
        _rcm = rcm,
        _rho = rho,
        _memo = memo;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? cmxOffset = _cmx == null ? null
        : fbBuilder.writeListUint8(_cmx!);
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    final int? rcmOffset = _rcm == null ? null
        : fbBuilder.writeListUint8(_rcm!);
    final int? rhoOffset = _rho == null ? null
        : fbBuilder.writeListUint8(_rho!);
    final int? memoOffset = _memo == null ? null
        : fbBuilder.writeString(_memo!);
    fbBuilder.startTable(7);
    fbBuilder.addBool(0, _incoming);
    fbBuilder.addOffset(1, cmxOffset);
    fbBuilder.addOffset(2, addressOffset);
    fbBuilder.addUint64(3, _value);
    fbBuilder.addOffset(4, rcmOffset);
    fbBuilder.addOffset(5, rhoOffset);
    fbBuilder.addOffset(6, memoOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ShieldedNote {
  ShieldedNote._(this._bc, this._bcOffset);
  factory ShieldedNote(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ShieldedNote> reader = _ShieldedNoteReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get idNote => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get confirmations => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get value => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  bool get orchard => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  bool get excluded => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);

  @override
  String toString() {
    return 'ShieldedNote{idNote: ${idNote}, height: ${height}, confirmations: ${confirmations}, timestamp: ${timestamp}, value: ${value}, orchard: ${orchard}, excluded: ${excluded}}';
  }

  ShieldedNoteT unpack() => ShieldedNoteT(
      idNote: idNote,
      height: height,
      confirmations: confirmations,
      timestamp: timestamp,
      value: value,
      orchard: orchard,
      excluded: excluded);

  static int pack(fb.Builder fbBuilder, ShieldedNoteT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ShieldedNoteT implements fb.Packable {
  int idNote;
  int height;
  int confirmations;
  int timestamp;
  int value;
  bool orchard;
  bool excluded;

  ShieldedNoteT({
      this.idNote = 0,
      this.height = 0,
      this.confirmations = 0,
      this.timestamp = 0,
      this.value = 0,
      this.orchard = false,
      this.excluded = false});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(7);
    fbBuilder.addUint32(0, idNote);
    fbBuilder.addUint32(1, height);
    fbBuilder.addUint32(2, confirmations);
    fbBuilder.addUint32(3, timestamp);
    fbBuilder.addUint64(4, value);
    fbBuilder.addBool(5, orchard);
    fbBuilder.addBool(6, excluded);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ShieldedNoteT{idNote: ${idNote}, height: ${height}, confirmations: ${confirmations}, timestamp: ${timestamp}, value: ${value}, orchard: ${orchard}, excluded: ${excluded}}';
  }
}

class _ShieldedNoteReader extends fb.TableReader<ShieldedNote> {
  const _ShieldedNoteReader();

  @override
  ShieldedNote createObject(fb.BufferContext bc, int offset) => 
    ShieldedNote._(bc, offset);
}

class ShieldedNoteBuilder {
  ShieldedNoteBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addIdNote(int? idNote) {
    fbBuilder.addUint32(0, idNote);
    return fbBuilder.offset;
  }
  int addHeight(int? height) {
    fbBuilder.addUint32(1, height);
    return fbBuilder.offset;
  }
  int addConfirmations(int? confirmations) {
    fbBuilder.addUint32(2, confirmations);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(3, timestamp);
    return fbBuilder.offset;
  }
  int addValue(int? value) {
    fbBuilder.addUint64(4, value);
    return fbBuilder.offset;
  }
  int addOrchard(bool? orchard) {
    fbBuilder.addBool(5, orchard);
    return fbBuilder.offset;
  }
  int addExcluded(bool? excluded) {
    fbBuilder.addBool(6, excluded);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ShieldedNoteObjectBuilder extends fb.ObjectBuilder {
  final int? _idNote;
  final int? _height;
  final int? _confirmations;
  final int? _timestamp;
  final int? _value;
  final bool? _orchard;
  final bool? _excluded;

  ShieldedNoteObjectBuilder({
    int? idNote,
    int? height,
    int? confirmations,
    int? timestamp,
    int? value,
    bool? orchard,
    bool? excluded,
  })
      : _idNote = idNote,
        _height = height,
        _confirmations = confirmations,
        _timestamp = timestamp,
        _value = value,
        _orchard = orchard,
        _excluded = excluded;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(7);
    fbBuilder.addUint32(0, _idNote);
    fbBuilder.addUint32(1, _height);
    fbBuilder.addUint32(2, _confirmations);
    fbBuilder.addUint32(3, _timestamp);
    fbBuilder.addUint64(4, _value);
    fbBuilder.addBool(5, _orchard);
    fbBuilder.addBool(6, _excluded);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ShieldedMessage {
  ShieldedMessage._(this._bc, this._bcOffset);
  factory ShieldedMessage(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ShieldedMessage> reader = _ShieldedMessageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get idMsg => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get account => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get idTx => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  List<int>? get txid => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 10);
  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  bool get incoming => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  String? get contact => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  int get nout => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  UserMemo? get memo => UserMemo.reader.vTableGetNullable(_bc, _bcOffset, 22);
  bool get read => const fb.BoolReader().vTableGet(_bc, _bcOffset, 24, false);

  @override
  String toString() {
    return 'ShieldedMessage{idMsg: ${idMsg}, account: ${account}, idTx: ${idTx}, txid: ${txid}, height: ${height}, timestamp: ${timestamp}, incoming: ${incoming}, contact: ${contact}, nout: ${nout}, memo: ${memo}, read: ${read}}';
  }

  ShieldedMessageT unpack() => ShieldedMessageT(
      idMsg: idMsg,
      account: account,
      idTx: idTx,
      txid: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 10),
      height: height,
      timestamp: timestamp,
      incoming: incoming,
      contact: contact,
      nout: nout,
      memo: memo?.unpack(),
      read: read);

  static int pack(fb.Builder fbBuilder, ShieldedMessageT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ShieldedMessageT implements fb.Packable {
  int idMsg;
  int account;
  int idTx;
  List<int>? txid;
  int height;
  int timestamp;
  bool incoming;
  String? contact;
  int nout;
  UserMemoT? memo;
  bool read;

  ShieldedMessageT({
      this.idMsg = 0,
      this.account = 0,
      this.idTx = 0,
      this.txid,
      this.height = 0,
      this.timestamp = 0,
      this.incoming = false,
      this.contact,
      this.nout = 0,
      this.memo,
      this.read = false});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? txidOffset = txid == null ? null
        : fbBuilder.writeListUint8(txid!);
    final int? contactOffset = contact == null ? null
        : fbBuilder.writeString(contact!);
    final int? memoOffset = memo?.pack(fbBuilder);
    fbBuilder.startTable(11);
    fbBuilder.addUint32(0, idMsg);
    fbBuilder.addUint32(1, account);
    fbBuilder.addUint32(2, idTx);
    fbBuilder.addOffset(3, txidOffset);
    fbBuilder.addUint32(4, height);
    fbBuilder.addUint32(5, timestamp);
    fbBuilder.addBool(6, incoming);
    fbBuilder.addOffset(7, contactOffset);
    fbBuilder.addUint32(8, nout);
    fbBuilder.addOffset(9, memoOffset);
    fbBuilder.addBool(10, read);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ShieldedMessageT{idMsg: ${idMsg}, account: ${account}, idTx: ${idTx}, txid: ${txid}, height: ${height}, timestamp: ${timestamp}, incoming: ${incoming}, contact: ${contact}, nout: ${nout}, memo: ${memo}, read: ${read}}';
  }
}

class _ShieldedMessageReader extends fb.TableReader<ShieldedMessage> {
  const _ShieldedMessageReader();

  @override
  ShieldedMessage createObject(fb.BufferContext bc, int offset) => 
    ShieldedMessage._(bc, offset);
}

class ShieldedMessageBuilder {
  ShieldedMessageBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addIdMsg(int? idMsg) {
    fbBuilder.addUint32(0, idMsg);
    return fbBuilder.offset;
  }
  int addAccount(int? account) {
    fbBuilder.addUint32(1, account);
    return fbBuilder.offset;
  }
  int addIdTx(int? idTx) {
    fbBuilder.addUint32(2, idTx);
    return fbBuilder.offset;
  }
  int addTxidOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addHeight(int? height) {
    fbBuilder.addUint32(4, height);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(5, timestamp);
    return fbBuilder.offset;
  }
  int addIncoming(bool? incoming) {
    fbBuilder.addBool(6, incoming);
    return fbBuilder.offset;
  }
  int addContactOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addNout(int? nout) {
    fbBuilder.addUint32(8, nout);
    return fbBuilder.offset;
  }
  int addMemoOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addRead(bool? read) {
    fbBuilder.addBool(10, read);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ShieldedMessageObjectBuilder extends fb.ObjectBuilder {
  final int? _idMsg;
  final int? _account;
  final int? _idTx;
  final List<int>? _txid;
  final int? _height;
  final int? _timestamp;
  final bool? _incoming;
  final String? _contact;
  final int? _nout;
  final UserMemoObjectBuilder? _memo;
  final bool? _read;

  ShieldedMessageObjectBuilder({
    int? idMsg,
    int? account,
    int? idTx,
    List<int>? txid,
    int? height,
    int? timestamp,
    bool? incoming,
    String? contact,
    int? nout,
    UserMemoObjectBuilder? memo,
    bool? read,
  })
      : _idMsg = idMsg,
        _account = account,
        _idTx = idTx,
        _txid = txid,
        _height = height,
        _timestamp = timestamp,
        _incoming = incoming,
        _contact = contact,
        _nout = nout,
        _memo = memo,
        _read = read;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? txidOffset = _txid == null ? null
        : fbBuilder.writeListUint8(_txid!);
    final int? contactOffset = _contact == null ? null
        : fbBuilder.writeString(_contact!);
    final int? memoOffset = _memo?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(11);
    fbBuilder.addUint32(0, _idMsg);
    fbBuilder.addUint32(1, _account);
    fbBuilder.addUint32(2, _idTx);
    fbBuilder.addOffset(3, txidOffset);
    fbBuilder.addUint32(4, _height);
    fbBuilder.addUint32(5, _timestamp);
    fbBuilder.addBool(6, _incoming);
    fbBuilder.addOffset(7, contactOffset);
    fbBuilder.addUint32(8, _nout);
    fbBuilder.addOffset(9, memoOffset);
    fbBuilder.addBool(10, _read);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Uareceivers {
  Uareceivers._(this._bc, this._bcOffset);
  factory Uareceivers(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Uareceivers> reader = _UareceiversReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get tex => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  String? get transparent => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get sapling => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get orchard => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'Uareceivers{tex: ${tex}, transparent: ${transparent}, sapling: ${sapling}, orchard: ${orchard}}';
  }

  UareceiversT unpack() => UareceiversT(
      tex: tex,
      transparent: transparent,
      sapling: sapling,
      orchard: orchard);

  static int pack(fb.Builder fbBuilder, UareceiversT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class UareceiversT implements fb.Packable {
  bool tex;
  String? transparent;
  String? sapling;
  String? orchard;

  UareceiversT({
      this.tex = false,
      this.transparent,
      this.sapling,
      this.orchard});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? transparentOffset = transparent == null ? null
        : fbBuilder.writeString(transparent!);
    final int? saplingOffset = sapling == null ? null
        : fbBuilder.writeString(sapling!);
    final int? orchardOffset = orchard == null ? null
        : fbBuilder.writeString(orchard!);
    fbBuilder.startTable(4);
    fbBuilder.addBool(0, tex);
    fbBuilder.addOffset(1, transparentOffset);
    fbBuilder.addOffset(2, saplingOffset);
    fbBuilder.addOffset(3, orchardOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'UareceiversT{tex: ${tex}, transparent: ${transparent}, sapling: ${sapling}, orchard: ${orchard}}';
  }
}

class _UareceiversReader extends fb.TableReader<Uareceivers> {
  const _UareceiversReader();

  @override
  Uareceivers createObject(fb.BufferContext bc, int offset) => 
    Uareceivers._(bc, offset);
}

class UareceiversBuilder {
  UareceiversBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTex(bool? tex) {
    fbBuilder.addBool(0, tex);
    return fbBuilder.offset;
  }
  int addTransparentOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSaplingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOrchardOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UareceiversObjectBuilder extends fb.ObjectBuilder {
  final bool? _tex;
  final String? _transparent;
  final String? _sapling;
  final String? _orchard;

  UareceiversObjectBuilder({
    bool? tex,
    String? transparent,
    String? sapling,
    String? orchard,
  })
      : _tex = tex,
        _transparent = transparent,
        _sapling = sapling,
        _orchard = orchard;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? transparentOffset = _transparent == null ? null
        : fbBuilder.writeString(_transparent!);
    final int? saplingOffset = _sapling == null ? null
        : fbBuilder.writeString(_sapling!);
    final int? orchardOffset = _orchard == null ? null
        : fbBuilder.writeString(_orchard!);
    fbBuilder.startTable(4);
    fbBuilder.addBool(0, _tex);
    fbBuilder.addOffset(1, transparentOffset);
    fbBuilder.addOffset(2, saplingOffset);
    fbBuilder.addOffset(3, orchardOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Recipient {
  Recipient._(this._bc, this._bcOffset);
  factory Recipient(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Recipient> reader = _RecipientReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get amount => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get pools => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 8, 0);
  UserMemo? get memo => UserMemo.reader.vTableGetNullable(_bc, _bcOffset, 10);
  List<int>? get memoBytes => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'Recipient{address: ${address}, amount: ${amount}, pools: ${pools}, memo: ${memo}, memoBytes: ${memoBytes}}';
  }

  RecipientT unpack() => RecipientT(
      address: address,
      amount: amount,
      pools: pools,
      memo: memo?.unpack(),
      memoBytes: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 12));

  static int pack(fb.Builder fbBuilder, RecipientT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class RecipientT implements fb.Packable {
  String? address;
  int amount;
  int pools;
  UserMemoT? memo;
  List<int>? memoBytes;

  RecipientT({
      this.address,
      this.amount = 0,
      this.pools = 0,
      this.memo,
      this.memoBytes});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    final int? memoOffset = memo?.pack(fbBuilder);
    final int? memoBytesOffset = memoBytes == null ? null
        : fbBuilder.writeListUint8(memoBytes!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, addressOffset);
    fbBuilder.addUint64(1, amount);
    fbBuilder.addUint8(2, pools);
    fbBuilder.addOffset(3, memoOffset);
    fbBuilder.addOffset(4, memoBytesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'RecipientT{address: ${address}, amount: ${amount}, pools: ${pools}, memo: ${memo}, memoBytes: ${memoBytes}}';
  }
}

class _RecipientReader extends fb.TableReader<Recipient> {
  const _RecipientReader();

  @override
  Recipient createObject(fb.BufferContext bc, int offset) => 
    Recipient._(bc, offset);
}

class RecipientBuilder {
  RecipientBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAmount(int? amount) {
    fbBuilder.addUint64(1, amount);
    return fbBuilder.offset;
  }
  int addPools(int? pools) {
    fbBuilder.addUint8(2, pools);
    return fbBuilder.offset;
  }
  int addMemoOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMemoBytesOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RecipientObjectBuilder extends fb.ObjectBuilder {
  final String? _address;
  final int? _amount;
  final int? _pools;
  final UserMemoObjectBuilder? _memo;
  final List<int>? _memoBytes;

  RecipientObjectBuilder({
    String? address,
    int? amount,
    int? pools,
    UserMemoObjectBuilder? memo,
    List<int>? memoBytes,
  })
      : _address = address,
        _amount = amount,
        _pools = pools,
        _memo = memo,
        _memoBytes = memoBytes;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    final int? memoOffset = _memo?.getOrCreateOffset(fbBuilder);
    final int? memoBytesOffset = _memoBytes == null ? null
        : fbBuilder.writeListUint8(_memoBytes!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, addressOffset);
    fbBuilder.addUint64(1, _amount);
    fbBuilder.addUint8(2, _pools);
    fbBuilder.addOffset(3, memoOffset);
    fbBuilder.addOffset(4, memoBytesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PaymentRequest {
  PaymentRequest._(this._bc, this._bcOffset);
  factory PaymentRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PaymentRequest> reader = _PaymentRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Recipient>? get recipients => const fb.ListReader<Recipient>(Recipient.reader).vTableGetNullable(_bc, _bcOffset, 4);
  int get srcPools => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0);
  bool get senderPayFees => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  bool get useChange => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get expiration => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 14, 0);

  @override
  String toString() {
    return 'PaymentRequest{recipients: ${recipients}, srcPools: ${srcPools}, senderPayFees: ${senderPayFees}, useChange: ${useChange}, height: ${height}, expiration: ${expiration}}';
  }

  PaymentRequestT unpack() => PaymentRequestT(
      recipients: recipients?.map((e) => e.unpack()).toList(),
      srcPools: srcPools,
      senderPayFees: senderPayFees,
      useChange: useChange,
      height: height,
      expiration: expiration);

  static int pack(fb.Builder fbBuilder, PaymentRequestT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class PaymentRequestT implements fb.Packable {
  List<RecipientT>? recipients;
  int srcPools;
  bool senderPayFees;
  bool useChange;
  int height;
  int expiration;

  PaymentRequestT({
      this.recipients,
      this.srcPools = 0,
      this.senderPayFees = false,
      this.useChange = false,
      this.height = 0,
      this.expiration = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? recipientsOffset = recipients == null ? null
        : fbBuilder.writeList(recipients!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, recipientsOffset);
    fbBuilder.addUint8(1, srcPools);
    fbBuilder.addBool(2, senderPayFees);
    fbBuilder.addBool(3, useChange);
    fbBuilder.addUint32(4, height);
    fbBuilder.addUint32(5, expiration);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'PaymentRequestT{recipients: ${recipients}, srcPools: ${srcPools}, senderPayFees: ${senderPayFees}, useChange: ${useChange}, height: ${height}, expiration: ${expiration}}';
  }
}

class _PaymentRequestReader extends fb.TableReader<PaymentRequest> {
  const _PaymentRequestReader();

  @override
  PaymentRequest createObject(fb.BufferContext bc, int offset) => 
    PaymentRequest._(bc, offset);
}

class PaymentRequestBuilder {
  PaymentRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addRecipientsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSrcPools(int? srcPools) {
    fbBuilder.addUint8(1, srcPools);
    return fbBuilder.offset;
  }
  int addSenderPayFees(bool? senderPayFees) {
    fbBuilder.addBool(2, senderPayFees);
    return fbBuilder.offset;
  }
  int addUseChange(bool? useChange) {
    fbBuilder.addBool(3, useChange);
    return fbBuilder.offset;
  }
  int addHeight(int? height) {
    fbBuilder.addUint32(4, height);
    return fbBuilder.offset;
  }
  int addExpiration(int? expiration) {
    fbBuilder.addUint32(5, expiration);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PaymentRequestObjectBuilder extends fb.ObjectBuilder {
  final List<RecipientObjectBuilder>? _recipients;
  final int? _srcPools;
  final bool? _senderPayFees;
  final bool? _useChange;
  final int? _height;
  final int? _expiration;

  PaymentRequestObjectBuilder({
    List<RecipientObjectBuilder>? recipients,
    int? srcPools,
    bool? senderPayFees,
    bool? useChange,
    int? height,
    int? expiration,
  })
      : _recipients = recipients,
        _srcPools = srcPools,
        _senderPayFees = senderPayFees,
        _useChange = useChange,
        _height = height,
        _expiration = expiration;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? recipientsOffset = _recipients == null ? null
        : fbBuilder.writeList(_recipients!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, recipientsOffset);
    fbBuilder.addUint8(1, _srcPools);
    fbBuilder.addBool(2, _senderPayFees);
    fbBuilder.addBool(3, _useChange);
    fbBuilder.addUint32(4, _height);
    fbBuilder.addUint32(5, _expiration);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AccountName {
  AccountName._(this._bc, this._bcOffset);
  factory AccountName(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AccountName> reader = _AccountNameReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get coin => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  int get birth => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get balance => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 12, 0);

  @override
  String toString() {
    return 'AccountName{coin: ${coin}, id: ${id}, name: ${name}, birth: ${birth}, balance: ${balance}}';
  }

  AccountNameT unpack() => AccountNameT(
      coin: coin,
      id: id,
      name: name,
      birth: birth,
      balance: balance);

  static int pack(fb.Builder fbBuilder, AccountNameT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AccountNameT implements fb.Packable {
  int coin;
  int id;
  String? name;
  int birth;
  int balance;

  AccountNameT({
      this.coin = 0,
      this.id = 0,
      this.name,
      this.birth = 0,
      this.balance = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? nameOffset = name == null ? null
        : fbBuilder.writeString(name!);
    fbBuilder.startTable(5);
    fbBuilder.addUint8(0, coin);
    fbBuilder.addUint32(1, id);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addUint32(3, birth);
    fbBuilder.addUint64(4, balance);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AccountNameT{coin: ${coin}, id: ${id}, name: ${name}, birth: ${birth}, balance: ${balance}}';
  }
}

class _AccountNameReader extends fb.TableReader<AccountName> {
  const _AccountNameReader();

  @override
  AccountName createObject(fb.BufferContext bc, int offset) => 
    AccountName._(bc, offset);
}

class AccountNameBuilder {
  AccountNameBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addCoin(int? coin) {
    fbBuilder.addUint8(0, coin);
    return fbBuilder.offset;
  }
  int addId(int? id) {
    fbBuilder.addUint32(1, id);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addBirth(int? birth) {
    fbBuilder.addUint32(3, birth);
    return fbBuilder.offset;
  }
  int addBalance(int? balance) {
    fbBuilder.addUint64(4, balance);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AccountNameObjectBuilder extends fb.ObjectBuilder {
  final int? _coin;
  final int? _id;
  final String? _name;
  final int? _birth;
  final int? _balance;

  AccountNameObjectBuilder({
    int? coin,
    int? id,
    String? name,
    int? birth,
    int? balance,
  })
      : _coin = coin,
        _id = id,
        _name = name,
        _birth = birth,
        _balance = balance;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(5);
    fbBuilder.addUint8(0, _coin);
    fbBuilder.addUint32(1, _id);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addUint32(3, _birth);
    fbBuilder.addUint64(4, _balance);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AccountNameList {
  AccountNameList._(this._bc, this._bcOffset);
  factory AccountNameList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AccountNameList> reader = _AccountNameListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<AccountName>? get items => const fb.ListReader<AccountName>(AccountName.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'AccountNameList{items: ${items}}';
  }

  AccountNameListT unpack() => AccountNameListT(
      items: items?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, AccountNameListT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AccountNameListT implements fb.Packable {
  List<AccountNameT>? items;

  AccountNameListT({
      this.items});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? itemsOffset = items == null ? null
        : fbBuilder.writeList(items!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, itemsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AccountNameListT{items: ${items}}';
  }
}

class _AccountNameListReader extends fb.TableReader<AccountNameList> {
  const _AccountNameListReader();

  @override
  AccountNameList createObject(fb.BufferContext bc, int offset) => 
    AccountNameList._(bc, offset);
}

class AccountNameListBuilder {
  AccountNameListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AccountNameListObjectBuilder extends fb.ObjectBuilder {
  final List<AccountNameObjectBuilder>? _items;

  AccountNameListObjectBuilder({
    List<AccountNameObjectBuilder>? items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContactCard {
  ContactCard._(this._bc, this._bcOffset);
  factory ContactCard(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContactCard> reader = _ContactCardReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get account => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  bool get saved => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);

  @override
  String toString() {
    return 'ContactCard{id: ${id}, account: ${account}, name: ${name}, address: ${address}, saved: ${saved}}';
  }

  ContactCardT unpack() => ContactCardT(
      id: id,
      account: account,
      name: name,
      address: address,
      saved: saved);

  static int pack(fb.Builder fbBuilder, ContactCardT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ContactCardT implements fb.Packable {
  int id;
  int account;
  String? name;
  String? address;
  bool saved;

  ContactCardT({
      this.id = 0,
      this.account = 0,
      this.name,
      this.address,
      this.saved = false});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? nameOffset = name == null ? null
        : fbBuilder.writeString(name!);
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    fbBuilder.startTable(5);
    fbBuilder.addUint32(0, id);
    fbBuilder.addUint32(1, account);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, addressOffset);
    fbBuilder.addBool(4, saved);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ContactCardT{id: ${id}, account: ${account}, name: ${name}, address: ${address}, saved: ${saved}}';
  }
}

class _ContactCardReader extends fb.TableReader<ContactCard> {
  const _ContactCardReader();

  @override
  ContactCard createObject(fb.BufferContext bc, int offset) => 
    ContactCard._(bc, offset);
}

class ContactCardBuilder {
  ContactCardBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addAccount(int? account) {
    fbBuilder.addUint32(1, account);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSaved(bool? saved) {
    fbBuilder.addBool(4, saved);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContactCardObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final int? _account;
  final String? _name;
  final String? _address;
  final bool? _saved;

  ContactCardObjectBuilder({
    int? id,
    int? account,
    String? name,
    String? address,
    bool? saved,
  })
      : _id = id,
        _account = account,
        _name = name,
        _address = address,
        _saved = saved;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    fbBuilder.startTable(5);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addUint32(1, _account);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, addressOffset);
    fbBuilder.addBool(4, _saved);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TransactionRecipient {
  TransactionRecipient._(this._bc, this._bcOffset);
  factory TransactionRecipient(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TransactionRecipient> reader = _TransactionRecipientReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get amount => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  bool get change => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);

  @override
  String toString() {
    return 'TransactionRecipient{address: ${address}, amount: ${amount}, change: ${change}}';
  }

  TransactionRecipientT unpack() => TransactionRecipientT(
      address: address,
      amount: amount,
      change: change);

  static int pack(fb.Builder fbBuilder, TransactionRecipientT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TransactionRecipientT implements fb.Packable {
  String? address;
  int amount;
  bool change;

  TransactionRecipientT({
      this.address,
      this.amount = 0,
      this.change = false});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, addressOffset);
    fbBuilder.addUint64(1, amount);
    fbBuilder.addBool(2, change);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TransactionRecipientT{address: ${address}, amount: ${amount}, change: ${change}}';
  }
}

class _TransactionRecipientReader extends fb.TableReader<TransactionRecipient> {
  const _TransactionRecipientReader();

  @override
  TransactionRecipient createObject(fb.BufferContext bc, int offset) => 
    TransactionRecipient._(bc, offset);
}

class TransactionRecipientBuilder {
  TransactionRecipientBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAmount(int? amount) {
    fbBuilder.addUint64(1, amount);
    return fbBuilder.offset;
  }
  int addChange(bool? change) {
    fbBuilder.addBool(2, change);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TransactionRecipientObjectBuilder extends fb.ObjectBuilder {
  final String? _address;
  final int? _amount;
  final bool? _change;

  TransactionRecipientObjectBuilder({
    String? address,
    int? amount,
    bool? change,
  })
      : _address = address,
        _amount = amount,
        _change = change;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, addressOffset);
    fbBuilder.addUint64(1, _amount);
    fbBuilder.addBool(2, _change);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TransactionSummary {
  TransactionSummary._(this._bc, this._bcOffset);
  factory TransactionSummary(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TransactionSummary> reader = _TransactionSummaryReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<TransactionRecipient>? get recipients => const fb.ListReader<TransactionRecipient>(TransactionRecipient.reader).vTableGetNullable(_bc, _bcOffset, 6);
  int get transparentIns => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get saplingNet => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get orchardNet => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get fee => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 14, 0);
  int get privacyLevel => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 16, 0);
  List<int>? get numInputs => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 18);
  List<int>? get numOutputs => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 20);
  List<int>? get data => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 22);
  String? get redirect => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);

  @override
  String toString() {
    return 'TransactionSummary{height: ${height}, recipients: ${recipients}, transparentIns: ${transparentIns}, saplingNet: ${saplingNet}, orchardNet: ${orchardNet}, fee: ${fee}, privacyLevel: ${privacyLevel}, numInputs: ${numInputs}, numOutputs: ${numOutputs}, data: ${data}, redirect: ${redirect}}';
  }

  TransactionSummaryT unpack() => TransactionSummaryT(
      height: height,
      recipients: recipients?.map((e) => e.unpack()).toList(),
      transparentIns: transparentIns,
      saplingNet: saplingNet,
      orchardNet: orchardNet,
      fee: fee,
      privacyLevel: privacyLevel,
      numInputs: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 18),
      numOutputs: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 20),
      data: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 22),
      redirect: redirect);

  static int pack(fb.Builder fbBuilder, TransactionSummaryT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TransactionSummaryT implements fb.Packable {
  int height;
  List<TransactionRecipientT>? recipients;
  int transparentIns;
  int saplingNet;
  int orchardNet;
  int fee;
  int privacyLevel;
  List<int>? numInputs;
  List<int>? numOutputs;
  List<int>? data;
  String? redirect;

  TransactionSummaryT({
      this.height = 0,
      this.recipients,
      this.transparentIns = 0,
      this.saplingNet = 0,
      this.orchardNet = 0,
      this.fee = 0,
      this.privacyLevel = 0,
      this.numInputs,
      this.numOutputs,
      this.data,
      this.redirect});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? recipientsOffset = recipients == null ? null
        : fbBuilder.writeList(recipients!.map((b) => b.pack(fbBuilder)).toList());
    final int? numInputsOffset = numInputs == null ? null
        : fbBuilder.writeListUint8(numInputs!);
    final int? numOutputsOffset = numOutputs == null ? null
        : fbBuilder.writeListUint8(numOutputs!);
    final int? dataOffset = data == null ? null
        : fbBuilder.writeListUint8(data!);
    final int? redirectOffset = redirect == null ? null
        : fbBuilder.writeString(redirect!);
    fbBuilder.startTable(11);
    fbBuilder.addUint32(0, height);
    fbBuilder.addOffset(1, recipientsOffset);
    fbBuilder.addUint64(2, transparentIns);
    fbBuilder.addInt64(3, saplingNet);
    fbBuilder.addInt64(4, orchardNet);
    fbBuilder.addUint64(5, fee);
    fbBuilder.addUint8(6, privacyLevel);
    fbBuilder.addOffset(7, numInputsOffset);
    fbBuilder.addOffset(8, numOutputsOffset);
    fbBuilder.addOffset(9, dataOffset);
    fbBuilder.addOffset(10, redirectOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TransactionSummaryT{height: ${height}, recipients: ${recipients}, transparentIns: ${transparentIns}, saplingNet: ${saplingNet}, orchardNet: ${orchardNet}, fee: ${fee}, privacyLevel: ${privacyLevel}, numInputs: ${numInputs}, numOutputs: ${numOutputs}, data: ${data}, redirect: ${redirect}}';
  }
}

class _TransactionSummaryReader extends fb.TableReader<TransactionSummary> {
  const _TransactionSummaryReader();

  @override
  TransactionSummary createObject(fb.BufferContext bc, int offset) => 
    TransactionSummary._(bc, offset);
}

class TransactionSummaryBuilder {
  TransactionSummaryBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addHeight(int? height) {
    fbBuilder.addUint32(0, height);
    return fbBuilder.offset;
  }
  int addRecipientsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTransparentIns(int? transparentIns) {
    fbBuilder.addUint64(2, transparentIns);
    return fbBuilder.offset;
  }
  int addSaplingNet(int? saplingNet) {
    fbBuilder.addInt64(3, saplingNet);
    return fbBuilder.offset;
  }
  int addOrchardNet(int? orchardNet) {
    fbBuilder.addInt64(4, orchardNet);
    return fbBuilder.offset;
  }
  int addFee(int? fee) {
    fbBuilder.addUint64(5, fee);
    return fbBuilder.offset;
  }
  int addPrivacyLevel(int? privacyLevel) {
    fbBuilder.addUint8(6, privacyLevel);
    return fbBuilder.offset;
  }
  int addNumInputsOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addNumOutputsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addRedirectOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TransactionSummaryObjectBuilder extends fb.ObjectBuilder {
  final int? _height;
  final List<TransactionRecipientObjectBuilder>? _recipients;
  final int? _transparentIns;
  final int? _saplingNet;
  final int? _orchardNet;
  final int? _fee;
  final int? _privacyLevel;
  final List<int>? _numInputs;
  final List<int>? _numOutputs;
  final List<int>? _data;
  final String? _redirect;

  TransactionSummaryObjectBuilder({
    int? height,
    List<TransactionRecipientObjectBuilder>? recipients,
    int? transparentIns,
    int? saplingNet,
    int? orchardNet,
    int? fee,
    int? privacyLevel,
    List<int>? numInputs,
    List<int>? numOutputs,
    List<int>? data,
    String? redirect,
  })
      : _height = height,
        _recipients = recipients,
        _transparentIns = transparentIns,
        _saplingNet = saplingNet,
        _orchardNet = orchardNet,
        _fee = fee,
        _privacyLevel = privacyLevel,
        _numInputs = numInputs,
        _numOutputs = numOutputs,
        _data = data,
        _redirect = redirect;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? recipientsOffset = _recipients == null ? null
        : fbBuilder.writeList(_recipients!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? numInputsOffset = _numInputs == null ? null
        : fbBuilder.writeListUint8(_numInputs!);
    final int? numOutputsOffset = _numOutputs == null ? null
        : fbBuilder.writeListUint8(_numOutputs!);
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeListUint8(_data!);
    final int? redirectOffset = _redirect == null ? null
        : fbBuilder.writeString(_redirect!);
    fbBuilder.startTable(11);
    fbBuilder.addUint32(0, _height);
    fbBuilder.addOffset(1, recipientsOffset);
    fbBuilder.addUint64(2, _transparentIns);
    fbBuilder.addInt64(3, _saplingNet);
    fbBuilder.addInt64(4, _orchardNet);
    fbBuilder.addUint64(5, _fee);
    fbBuilder.addUint8(6, _privacyLevel);
    fbBuilder.addOffset(7, numInputsOffset);
    fbBuilder.addOffset(8, numOutputsOffset);
    fbBuilder.addOffset(9, dataOffset);
    fbBuilder.addOffset(10, redirectOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Agekeys {
  Agekeys._(this._bc, this._bcOffset);
  factory Agekeys(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Agekeys> reader = _AgekeysReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get publicKey => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get secretKey => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Agekeys{publicKey: ${publicKey}, secretKey: ${secretKey}}';
  }

  AgekeysT unpack() => AgekeysT(
      publicKey: publicKey,
      secretKey: secretKey);

  static int pack(fb.Builder fbBuilder, AgekeysT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AgekeysT implements fb.Packable {
  String? publicKey;
  String? secretKey;

  AgekeysT({
      this.publicKey,
      this.secretKey});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? publicKeyOffset = publicKey == null ? null
        : fbBuilder.writeString(publicKey!);
    final int? secretKeyOffset = secretKey == null ? null
        : fbBuilder.writeString(secretKey!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, publicKeyOffset);
    fbBuilder.addOffset(1, secretKeyOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AgekeysT{publicKey: ${publicKey}, secretKey: ${secretKey}}';
  }
}

class _AgekeysReader extends fb.TableReader<Agekeys> {
  const _AgekeysReader();

  @override
  Agekeys createObject(fb.BufferContext bc, int offset) => 
    Agekeys._(bc, offset);
}

class AgekeysBuilder {
  AgekeysBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSecretKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AgekeysObjectBuilder extends fb.ObjectBuilder {
  final String? _publicKey;
  final String? _secretKey;

  AgekeysObjectBuilder({
    String? publicKey,
    String? secretKey,
  })
      : _publicKey = publicKey,
        _secretKey = secretKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? publicKeyOffset = _publicKey == null ? null
        : fbBuilder.writeString(_publicKey!);
    final int? secretKeyOffset = _secretKey == null ? null
        : fbBuilder.writeString(_secretKey!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, publicKeyOffset);
    fbBuilder.addOffset(1, secretKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Balance {
  Balance._(this._bc, this._bcOffset);
  factory Balance(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Balance> reader = _BalanceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get transparent => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get sapling => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get orchard => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'Balance{transparent: ${transparent}, sapling: ${sapling}, orchard: ${orchard}}';
  }

  BalanceT unpack() => BalanceT(
      transparent: transparent,
      sapling: sapling,
      orchard: orchard);

  static int pack(fb.Builder fbBuilder, BalanceT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class BalanceT implements fb.Packable {
  int transparent;
  int sapling;
  int orchard;

  BalanceT({
      this.transparent = 0,
      this.sapling = 0,
      this.orchard = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(3);
    fbBuilder.addUint64(0, transparent);
    fbBuilder.addUint64(1, sapling);
    fbBuilder.addUint64(2, orchard);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'BalanceT{transparent: ${transparent}, sapling: ${sapling}, orchard: ${orchard}}';
  }
}

class _BalanceReader extends fb.TableReader<Balance> {
  const _BalanceReader();

  @override
  Balance createObject(fb.BufferContext bc, int offset) => 
    Balance._(bc, offset);
}

class BalanceBuilder {
  BalanceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addTransparent(int? transparent) {
    fbBuilder.addUint64(0, transparent);
    return fbBuilder.offset;
  }
  int addSapling(int? sapling) {
    fbBuilder.addUint64(1, sapling);
    return fbBuilder.offset;
  }
  int addOrchard(int? orchard) {
    fbBuilder.addUint64(2, orchard);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BalanceObjectBuilder extends fb.ObjectBuilder {
  final int? _transparent;
  final int? _sapling;
  final int? _orchard;

  BalanceObjectBuilder({
    int? transparent,
    int? sapling,
    int? orchard,
  })
      : _transparent = transparent,
        _sapling = sapling,
        _orchard = orchard;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(3);
    fbBuilder.addUint64(0, _transparent);
    fbBuilder.addUint64(1, _sapling);
    fbBuilder.addUint64(2, _orchard);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Packet {
  Packet._(this._bc, this._bcOffset);
  factory Packet(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Packet> reader = _PacketReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get len => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<int>? get data => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Packet{len: ${len}, data: ${data}}';
  }

  PacketT unpack() => PacketT(
      len: len,
      data: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 6));

  static int pack(fb.Builder fbBuilder, PacketT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class PacketT implements fb.Packable {
  int len;
  List<int>? data;

  PacketT({
      this.len = 0,
      this.data});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? dataOffset = data == null ? null
        : fbBuilder.writeListUint8(data!);
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, len);
    fbBuilder.addOffset(1, dataOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'PacketT{len: ${len}, data: ${data}}';
  }
}

class _PacketReader extends fb.TableReader<Packet> {
  const _PacketReader();

  @override
  Packet createObject(fb.BufferContext bc, int offset) => 
    Packet._(bc, offset);
}

class PacketBuilder {
  PacketBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addLen(int? len) {
    fbBuilder.addUint32(0, len);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PacketObjectBuilder extends fb.ObjectBuilder {
  final int? _len;
  final List<int>? _data;

  PacketObjectBuilder({
    int? len,
    List<int>? data,
  })
      : _len = len,
        _data = data;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeListUint8(_data!);
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _len);
    fbBuilder.addOffset(1, dataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Packets {
  Packets._(this._bc, this._bcOffset);
  factory Packets(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Packets> reader = _PacketsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Packet>? get packets => const fb.ListReader<Packet>(Packet.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'Packets{packets: ${packets}}';
  }

  PacketsT unpack() => PacketsT(
      packets: packets?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, PacketsT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class PacketsT implements fb.Packable {
  List<PacketT>? packets;

  PacketsT({
      this.packets});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? packetsOffset = packets == null ? null
        : fbBuilder.writeList(packets!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, packetsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'PacketsT{packets: ${packets}}';
  }
}

class _PacketsReader extends fb.TableReader<Packets> {
  const _PacketsReader();

  @override
  Packets createObject(fb.BufferContext bc, int offset) => 
    Packets._(bc, offset);
}

class PacketsBuilder {
  PacketsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPacketsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PacketsObjectBuilder extends fb.ObjectBuilder {
  final List<PacketObjectBuilder>? _packets;

  PacketsObjectBuilder({
    List<PacketObjectBuilder>? packets,
  })
      : _packets = packets;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? packetsOffset = _packets == null ? null
        : fbBuilder.writeList(_packets!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, packetsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Checkpoint {
  Checkpoint._(this._bc, this._bcOffset);
  factory Checkpoint(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Checkpoint> reader = _CheckpointReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<int>? get hash => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'Checkpoint{height: ${height}, hash: ${hash}, timestamp: ${timestamp}}';
  }

  CheckpointT unpack() => CheckpointT(
      height: height,
      hash: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 6),
      timestamp: timestamp);

  static int pack(fb.Builder fbBuilder, CheckpointT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class CheckpointT implements fb.Packable {
  int height;
  List<int>? hash;
  int timestamp;

  CheckpointT({
      this.height = 0,
      this.hash,
      this.timestamp = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? hashOffset = hash == null ? null
        : fbBuilder.writeListUint8(hash!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, height);
    fbBuilder.addOffset(1, hashOffset);
    fbBuilder.addUint32(2, timestamp);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'CheckpointT{height: ${height}, hash: ${hash}, timestamp: ${timestamp}}';
  }
}

class _CheckpointReader extends fb.TableReader<Checkpoint> {
  const _CheckpointReader();

  @override
  Checkpoint createObject(fb.BufferContext bc, int offset) => 
    Checkpoint._(bc, offset);
}

class CheckpointBuilder {
  CheckpointBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addHeight(int? height) {
    fbBuilder.addUint32(0, height);
    return fbBuilder.offset;
  }
  int addHashOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(2, timestamp);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CheckpointObjectBuilder extends fb.ObjectBuilder {
  final int? _height;
  final List<int>? _hash;
  final int? _timestamp;

  CheckpointObjectBuilder({
    int? height,
    List<int>? hash,
    int? timestamp,
  })
      : _height = height,
        _hash = hash,
        _timestamp = timestamp;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? hashOffset = _hash == null ? null
        : fbBuilder.writeListUint8(_hash!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, _height);
    fbBuilder.addOffset(1, hashOffset);
    fbBuilder.addUint32(2, _timestamp);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Spending {
  Spending._(this._bc, this._bcOffset);
  factory Spending(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Spending> reader = _SpendingReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get recipient => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get amount => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'Spending{recipient: ${recipient}, amount: ${amount}}';
  }

  SpendingT unpack() => SpendingT(
      recipient: recipient,
      amount: amount);

  static int pack(fb.Builder fbBuilder, SpendingT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SpendingT implements fb.Packable {
  String? recipient;
  int amount;

  SpendingT({
      this.recipient,
      this.amount = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? recipientOffset = recipient == null ? null
        : fbBuilder.writeString(recipient!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, recipientOffset);
    fbBuilder.addUint64(1, amount);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SpendingT{recipient: ${recipient}, amount: ${amount}}';
  }
}

class _SpendingReader extends fb.TableReader<Spending> {
  const _SpendingReader();

  @override
  Spending createObject(fb.BufferContext bc, int offset) => 
    Spending._(bc, offset);
}

class SpendingBuilder {
  SpendingBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addRecipientOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAmount(int? amount) {
    fbBuilder.addUint64(1, amount);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SpendingObjectBuilder extends fb.ObjectBuilder {
  final String? _recipient;
  final int? _amount;

  SpendingObjectBuilder({
    String? recipient,
    int? amount,
  })
      : _recipient = recipient,
        _amount = amount;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? recipientOffset = _recipient == null ? null
        : fbBuilder.writeString(_recipient!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, recipientOffset);
    fbBuilder.addUint64(1, _amount);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Progress {
  Progress._(this._bc, this._bcOffset);
  factory Progress(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Progress> reader = _ProgressReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get trialDecryptions => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get downloaded => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'Progress{trialDecryptions: ${trialDecryptions}, downloaded: ${downloaded}, height: ${height}, timestamp: ${timestamp}}';
  }

  ProgressT unpack() => ProgressT(
      trialDecryptions: trialDecryptions,
      downloaded: downloaded,
      height: height,
      timestamp: timestamp);

  static int pack(fb.Builder fbBuilder, ProgressT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ProgressT implements fb.Packable {
  int trialDecryptions;
  int downloaded;
  int height;
  int timestamp;

  ProgressT({
      this.trialDecryptions = 0,
      this.downloaded = 0,
      this.height = 0,
      this.timestamp = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(4);
    fbBuilder.addUint32(0, trialDecryptions);
    fbBuilder.addUint64(1, downloaded);
    fbBuilder.addUint32(2, height);
    fbBuilder.addUint32(3, timestamp);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ProgressT{trialDecryptions: ${trialDecryptions}, downloaded: ${downloaded}, height: ${height}, timestamp: ${timestamp}}';
  }
}

class _ProgressReader extends fb.TableReader<Progress> {
  const _ProgressReader();

  @override
  Progress createObject(fb.BufferContext bc, int offset) => 
    Progress._(bc, offset);
}

class ProgressBuilder {
  ProgressBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTrialDecryptions(int? trialDecryptions) {
    fbBuilder.addUint32(0, trialDecryptions);
    return fbBuilder.offset;
  }
  int addDownloaded(int? downloaded) {
    fbBuilder.addUint64(1, downloaded);
    return fbBuilder.offset;
  }
  int addHeight(int? height) {
    fbBuilder.addUint32(2, height);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(3, timestamp);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ProgressObjectBuilder extends fb.ObjectBuilder {
  final int? _trialDecryptions;
  final int? _downloaded;
  final int? _height;
  final int? _timestamp;

  ProgressObjectBuilder({
    int? trialDecryptions,
    int? downloaded,
    int? height,
    int? timestamp,
  })
      : _trialDecryptions = trialDecryptions,
        _downloaded = downloaded,
        _height = height,
        _timestamp = timestamp;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(4);
    fbBuilder.addUint32(0, _trialDecryptions);
    fbBuilder.addUint64(1, _downloaded);
    fbBuilder.addUint32(2, _height);
    fbBuilder.addUint32(3, _timestamp);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class UserMemo {
  UserMemo._(this._bc, this._bcOffset);
  factory UserMemo(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UserMemo> reader = _UserMemoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get replyTo => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  String? get sender => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get recipient => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get body => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get subject => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'UserMemo{replyTo: ${replyTo}, sender: ${sender}, recipient: ${recipient}, body: ${body}, subject: ${subject}}';
  }

  UserMemoT unpack() => UserMemoT(
      replyTo: replyTo,
      sender: sender,
      recipient: recipient,
      body: body,
      subject: subject);

  static int pack(fb.Builder fbBuilder, UserMemoT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class UserMemoT implements fb.Packable {
  bool replyTo;
  String? sender;
  String? recipient;
  String? body;
  String? subject;

  UserMemoT({
      this.replyTo = false,
      this.sender,
      this.recipient,
      this.body,
      this.subject});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? senderOffset = sender == null ? null
        : fbBuilder.writeString(sender!);
    final int? recipientOffset = recipient == null ? null
        : fbBuilder.writeString(recipient!);
    final int? bodyOffset = body == null ? null
        : fbBuilder.writeString(body!);
    final int? subjectOffset = subject == null ? null
        : fbBuilder.writeString(subject!);
    fbBuilder.startTable(5);
    fbBuilder.addBool(0, replyTo);
    fbBuilder.addOffset(1, senderOffset);
    fbBuilder.addOffset(2, recipientOffset);
    fbBuilder.addOffset(3, bodyOffset);
    fbBuilder.addOffset(4, subjectOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'UserMemoT{replyTo: ${replyTo}, sender: ${sender}, recipient: ${recipient}, body: ${body}, subject: ${subject}}';
  }
}

class _UserMemoReader extends fb.TableReader<UserMemo> {
  const _UserMemoReader();

  @override
  UserMemo createObject(fb.BufferContext bc, int offset) => 
    UserMemo._(bc, offset);
}

class UserMemoBuilder {
  UserMemoBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addReplyTo(bool? replyTo) {
    fbBuilder.addBool(0, replyTo);
    return fbBuilder.offset;
  }
  int addSenderOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addRecipientOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addBodyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSubjectOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UserMemoObjectBuilder extends fb.ObjectBuilder {
  final bool? _replyTo;
  final String? _sender;
  final String? _recipient;
  final String? _body;
  final String? _subject;

  UserMemoObjectBuilder({
    bool? replyTo,
    String? sender,
    String? recipient,
    String? body,
    String? subject,
  })
      : _replyTo = replyTo,
        _sender = sender,
        _recipient = recipient,
        _body = body,
        _subject = subject;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? senderOffset = _sender == null ? null
        : fbBuilder.writeString(_sender!);
    final int? recipientOffset = _recipient == null ? null
        : fbBuilder.writeString(_recipient!);
    final int? bodyOffset = _body == null ? null
        : fbBuilder.writeString(_body!);
    final int? subjectOffset = _subject == null ? null
        : fbBuilder.writeString(_subject!);
    fbBuilder.startTable(5);
    fbBuilder.addBool(0, _replyTo);
    fbBuilder.addOffset(1, senderOffset);
    fbBuilder.addOffset(2, recipientOffset);
    fbBuilder.addOffset(3, bodyOffset);
    fbBuilder.addOffset(4, subjectOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Zip32Keys {
  Zip32Keys._(this._bc, this._bcOffset);
  factory Zip32Keys(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Zip32Keys> reader = _Zip32KeysReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get aindex => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get addrIndex => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get tsk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get taddress => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get zsk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get zaddress => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'Zip32Keys{aindex: ${aindex}, addrIndex: ${addrIndex}, tsk: ${tsk}, taddress: ${taddress}, zsk: ${zsk}, zaddress: ${zaddress}}';
  }

  Zip32KeysT unpack() => Zip32KeysT(
      aindex: aindex,
      addrIndex: addrIndex,
      tsk: tsk,
      taddress: taddress,
      zsk: zsk,
      zaddress: zaddress);

  static int pack(fb.Builder fbBuilder, Zip32KeysT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class Zip32KeysT implements fb.Packable {
  int aindex;
  int addrIndex;
  String? tsk;
  String? taddress;
  String? zsk;
  String? zaddress;

  Zip32KeysT({
      this.aindex = 0,
      this.addrIndex = 0,
      this.tsk,
      this.taddress,
      this.zsk,
      this.zaddress});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? tskOffset = tsk == null ? null
        : fbBuilder.writeString(tsk!);
    final int? taddressOffset = taddress == null ? null
        : fbBuilder.writeString(taddress!);
    final int? zskOffset = zsk == null ? null
        : fbBuilder.writeString(zsk!);
    final int? zaddressOffset = zaddress == null ? null
        : fbBuilder.writeString(zaddress!);
    fbBuilder.startTable(6);
    fbBuilder.addUint32(0, aindex);
    fbBuilder.addUint32(1, addrIndex);
    fbBuilder.addOffset(2, tskOffset);
    fbBuilder.addOffset(3, taddressOffset);
    fbBuilder.addOffset(4, zskOffset);
    fbBuilder.addOffset(5, zaddressOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'Zip32KeysT{aindex: ${aindex}, addrIndex: ${addrIndex}, tsk: ${tsk}, taddress: ${taddress}, zsk: ${zsk}, zaddress: ${zaddress}}';
  }
}

class _Zip32KeysReader extends fb.TableReader<Zip32Keys> {
  const _Zip32KeysReader();

  @override
  Zip32Keys createObject(fb.BufferContext bc, int offset) => 
    Zip32Keys._(bc, offset);
}

class Zip32KeysBuilder {
  Zip32KeysBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addAindex(int? aindex) {
    fbBuilder.addUint32(0, aindex);
    return fbBuilder.offset;
  }
  int addAddrIndex(int? addrIndex) {
    fbBuilder.addUint32(1, addrIndex);
    return fbBuilder.offset;
  }
  int addTskOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTaddressOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addZskOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addZaddressOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class Zip32KeysObjectBuilder extends fb.ObjectBuilder {
  final int? _aindex;
  final int? _addrIndex;
  final String? _tsk;
  final String? _taddress;
  final String? _zsk;
  final String? _zaddress;

  Zip32KeysObjectBuilder({
    int? aindex,
    int? addrIndex,
    String? tsk,
    String? taddress,
    String? zsk,
    String? zaddress,
  })
      : _aindex = aindex,
        _addrIndex = addrIndex,
        _tsk = tsk,
        _taddress = taddress,
        _zsk = zsk,
        _zaddress = zaddress;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? tskOffset = _tsk == null ? null
        : fbBuilder.writeString(_tsk!);
    final int? taddressOffset = _taddress == null ? null
        : fbBuilder.writeString(_taddress!);
    final int? zskOffset = _zsk == null ? null
        : fbBuilder.writeString(_zsk!);
    final int? zaddressOffset = _zaddress == null ? null
        : fbBuilder.writeString(_zaddress!);
    fbBuilder.startTable(6);
    fbBuilder.addUint32(0, _aindex);
    fbBuilder.addUint32(1, _addrIndex);
    fbBuilder.addOffset(2, tskOffset);
    fbBuilder.addOffset(3, taddressOffset);
    fbBuilder.addOffset(4, zskOffset);
    fbBuilder.addOffset(5, zaddressOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Config {
  Config._(this._bc, this._bcOffset);
  factory Config(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Config> reader = _ConfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get dbPath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get servers => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  String? get warpUrl => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  int get warpEndHeight => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get confirmations => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  bool get regtest => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);

  @override
  String toString() {
    return 'Config{dbPath: ${dbPath}, servers: ${servers}, warpUrl: ${warpUrl}, warpEndHeight: ${warpEndHeight}, confirmations: ${confirmations}, regtest: ${regtest}}';
  }

  ConfigT unpack() => ConfigT(
      dbPath: dbPath,
      servers: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 6),
      warpUrl: warpUrl,
      warpEndHeight: warpEndHeight,
      confirmations: confirmations,
      regtest: regtest);

  static int pack(fb.Builder fbBuilder, ConfigT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ConfigT implements fb.Packable {
  String? dbPath;
  List<String>? servers;
  String? warpUrl;
  int warpEndHeight;
  int confirmations;
  bool regtest;

  ConfigT({
      this.dbPath,
      this.servers,
      this.warpUrl,
      this.warpEndHeight = 0,
      this.confirmations = 0,
      this.regtest = false});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? dbPathOffset = dbPath == null ? null
        : fbBuilder.writeString(dbPath!);
    final int? serversOffset = servers == null ? null
        : fbBuilder.writeList(servers!.map(fbBuilder.writeString).toList());
    final int? warpUrlOffset = warpUrl == null ? null
        : fbBuilder.writeString(warpUrl!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, dbPathOffset);
    fbBuilder.addOffset(1, serversOffset);
    fbBuilder.addOffset(2, warpUrlOffset);
    fbBuilder.addUint32(3, warpEndHeight);
    fbBuilder.addUint32(4, confirmations);
    fbBuilder.addBool(5, regtest);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ConfigT{dbPath: ${dbPath}, servers: ${servers}, warpUrl: ${warpUrl}, warpEndHeight: ${warpEndHeight}, confirmations: ${confirmations}, regtest: ${regtest}}';
  }
}

class _ConfigReader extends fb.TableReader<Config> {
  const _ConfigReader();

  @override
  Config createObject(fb.BufferContext bc, int offset) => 
    Config._(bc, offset);
}

class ConfigBuilder {
  ConfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addDbPathOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addServersOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addWarpUrlOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addWarpEndHeight(int? warpEndHeight) {
    fbBuilder.addUint32(3, warpEndHeight);
    return fbBuilder.offset;
  }
  int addConfirmations(int? confirmations) {
    fbBuilder.addUint32(4, confirmations);
    return fbBuilder.offset;
  }
  int addRegtest(bool? regtest) {
    fbBuilder.addBool(5, regtest);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConfigObjectBuilder extends fb.ObjectBuilder {
  final String? _dbPath;
  final List<String>? _servers;
  final String? _warpUrl;
  final int? _warpEndHeight;
  final int? _confirmations;
  final bool? _regtest;

  ConfigObjectBuilder({
    String? dbPath,
    List<String>? servers,
    String? warpUrl,
    int? warpEndHeight,
    int? confirmations,
    bool? regtest,
  })
      : _dbPath = dbPath,
        _servers = servers,
        _warpUrl = warpUrl,
        _warpEndHeight = warpEndHeight,
        _confirmations = confirmations,
        _regtest = regtest;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dbPathOffset = _dbPath == null ? null
        : fbBuilder.writeString(_dbPath!);
    final int? serversOffset = _servers == null ? null
        : fbBuilder.writeList(_servers!.map(fbBuilder.writeString).toList());
    final int? warpUrlOffset = _warpUrl == null ? null
        : fbBuilder.writeString(_warpUrl!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, dbPathOffset);
    fbBuilder.addOffset(1, serversOffset);
    fbBuilder.addOffset(2, warpUrlOffset);
    fbBuilder.addUint32(3, _warpEndHeight);
    fbBuilder.addUint32(4, _confirmations);
    fbBuilder.addBool(5, _regtest);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AccountSigningCapabilities {
  AccountSigningCapabilities._(this._bc, this._bcOffset);
  factory AccountSigningCapabilities(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AccountSigningCapabilities> reader = _AccountSigningCapabilitiesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get seed => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  int get transparent => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get sapling => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get orchard => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'AccountSigningCapabilities{seed: ${seed}, transparent: ${transparent}, sapling: ${sapling}, orchard: ${orchard}}';
  }

  AccountSigningCapabilitiesT unpack() => AccountSigningCapabilitiesT(
      seed: seed,
      transparent: transparent,
      sapling: sapling,
      orchard: orchard);

  static int pack(fb.Builder fbBuilder, AccountSigningCapabilitiesT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AccountSigningCapabilitiesT implements fb.Packable {
  bool seed;
  int transparent;
  int sapling;
  int orchard;

  AccountSigningCapabilitiesT({
      this.seed = false,
      this.transparent = 0,
      this.sapling = 0,
      this.orchard = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(4);
    fbBuilder.addBool(0, seed);
    fbBuilder.addUint8(1, transparent);
    fbBuilder.addUint8(2, sapling);
    fbBuilder.addUint8(3, orchard);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AccountSigningCapabilitiesT{seed: ${seed}, transparent: ${transparent}, sapling: ${sapling}, orchard: ${orchard}}';
  }
}

class _AccountSigningCapabilitiesReader extends fb.TableReader<AccountSigningCapabilities> {
  const _AccountSigningCapabilitiesReader();

  @override
  AccountSigningCapabilities createObject(fb.BufferContext bc, int offset) => 
    AccountSigningCapabilities._(bc, offset);
}

class AccountSigningCapabilitiesBuilder {
  AccountSigningCapabilitiesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addSeed(bool? seed) {
    fbBuilder.addBool(0, seed);
    return fbBuilder.offset;
  }
  int addTransparent(int? transparent) {
    fbBuilder.addUint8(1, transparent);
    return fbBuilder.offset;
  }
  int addSapling(int? sapling) {
    fbBuilder.addUint8(2, sapling);
    return fbBuilder.offset;
  }
  int addOrchard(int? orchard) {
    fbBuilder.addUint8(3, orchard);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AccountSigningCapabilitiesObjectBuilder extends fb.ObjectBuilder {
  final bool? _seed;
  final int? _transparent;
  final int? _sapling;
  final int? _orchard;

  AccountSigningCapabilitiesObjectBuilder({
    bool? seed,
    int? transparent,
    int? sapling,
    int? orchard,
  })
      : _seed = seed,
        _transparent = transparent,
        _sapling = sapling,
        _orchard = orchard;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(4);
    fbBuilder.addBool(0, _seed);
    fbBuilder.addUint8(1, _transparent);
    fbBuilder.addUint8(2, _sapling);
    fbBuilder.addUint8(3, _orchard);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SchemaVersion {
  SchemaVersion._(this._bc, this._bcOffset);
  factory SchemaVersion(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SchemaVersion> reader = _SchemaVersionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get major => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get minor => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'SchemaVersion{major: ${major}, minor: ${minor}}';
  }

  SchemaVersionT unpack() => SchemaVersionT(
      major: major,
      minor: minor);

  static int pack(fb.Builder fbBuilder, SchemaVersionT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SchemaVersionT implements fb.Packable {
  int major;
  int minor;

  SchemaVersionT({
      this.major = 0,
      this.minor = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint8(0, major);
    fbBuilder.addUint8(1, minor);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SchemaVersionT{major: ${major}, minor: ${minor}}';
  }
}

class _SchemaVersionReader extends fb.TableReader<SchemaVersion> {
  const _SchemaVersionReader();

  @override
  SchemaVersion createObject(fb.BufferContext bc, int offset) => 
    SchemaVersion._(bc, offset);
}

class SchemaVersionBuilder {
  SchemaVersionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMajor(int? major) {
    fbBuilder.addUint8(0, major);
    return fbBuilder.offset;
  }
  int addMinor(int? minor) {
    fbBuilder.addUint8(1, minor);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SchemaVersionObjectBuilder extends fb.ObjectBuilder {
  final int? _major;
  final int? _minor;

  SchemaVersionObjectBuilder({
    int? major,
    int? minor,
  })
      : _major = major,
        _minor = minor;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint8(0, _major);
    fbBuilder.addUint8(1, _minor);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ZipDbConfig {
  ZipDbConfig._(this._bc, this._bcOffset);
  factory ZipDbConfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ZipDbConfig> reader = _ZipDbConfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get directory => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get fileList => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  String? get targetPath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get publicKey => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ZipDbConfig{directory: ${directory}, fileList: ${fileList}, targetPath: ${targetPath}, publicKey: ${publicKey}}';
  }

  ZipDbConfigT unpack() => ZipDbConfigT(
      directory: directory,
      fileList: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 6),
      targetPath: targetPath,
      publicKey: publicKey);

  static int pack(fb.Builder fbBuilder, ZipDbConfigT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ZipDbConfigT implements fb.Packable {
  String? directory;
  List<String>? fileList;
  String? targetPath;
  String? publicKey;

  ZipDbConfigT({
      this.directory,
      this.fileList,
      this.targetPath,
      this.publicKey});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? directoryOffset = directory == null ? null
        : fbBuilder.writeString(directory!);
    final int? fileListOffset = fileList == null ? null
        : fbBuilder.writeList(fileList!.map(fbBuilder.writeString).toList());
    final int? targetPathOffset = targetPath == null ? null
        : fbBuilder.writeString(targetPath!);
    final int? publicKeyOffset = publicKey == null ? null
        : fbBuilder.writeString(publicKey!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, directoryOffset);
    fbBuilder.addOffset(1, fileListOffset);
    fbBuilder.addOffset(2, targetPathOffset);
    fbBuilder.addOffset(3, publicKeyOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ZipDbConfigT{directory: ${directory}, fileList: ${fileList}, targetPath: ${targetPath}, publicKey: ${publicKey}}';
  }
}

class _ZipDbConfigReader extends fb.TableReader<ZipDbConfig> {
  const _ZipDbConfigReader();

  @override
  ZipDbConfig createObject(fb.BufferContext bc, int offset) => 
    ZipDbConfig._(bc, offset);
}

class ZipDbConfigBuilder {
  ZipDbConfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addDirectoryOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFileListOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTargetPathOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPublicKeyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ZipDbConfigObjectBuilder extends fb.ObjectBuilder {
  final String? _directory;
  final List<String>? _fileList;
  final String? _targetPath;
  final String? _publicKey;

  ZipDbConfigObjectBuilder({
    String? directory,
    List<String>? fileList,
    String? targetPath,
    String? publicKey,
  })
      : _directory = directory,
        _fileList = fileList,
        _targetPath = targetPath,
        _publicKey = publicKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? directoryOffset = _directory == null ? null
        : fbBuilder.writeString(_directory!);
    final int? fileListOffset = _fileList == null ? null
        : fbBuilder.writeList(_fileList!.map(fbBuilder.writeString).toList());
    final int? targetPathOffset = _targetPath == null ? null
        : fbBuilder.writeString(_targetPath!);
    final int? publicKeyOffset = _publicKey == null ? null
        : fbBuilder.writeString(_publicKey!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, directoryOffset);
    fbBuilder.addOffset(1, fileListOffset);
    fbBuilder.addOffset(2, targetPathOffset);
    fbBuilder.addOffset(3, publicKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TransparentAddress {
  TransparentAddress._(this._bc, this._bcOffset);
  factory TransparentAddress(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TransparentAddress> reader = _TransparentAddressReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get addrIndex => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'TransparentAddress{addrIndex: ${addrIndex}, address: ${address}}';
  }

  TransparentAddressT unpack() => TransparentAddressT(
      addrIndex: addrIndex,
      address: address);

  static int pack(fb.Builder fbBuilder, TransparentAddressT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TransparentAddressT implements fb.Packable {
  int addrIndex;
  String? address;

  TransparentAddressT({
      this.addrIndex = 0,
      this.address});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, addrIndex);
    fbBuilder.addOffset(1, addressOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TransparentAddressT{addrIndex: ${addrIndex}, address: ${address}}';
  }
}

class _TransparentAddressReader extends fb.TableReader<TransparentAddress> {
  const _TransparentAddressReader();

  @override
  TransparentAddress createObject(fb.BufferContext bc, int offset) => 
    TransparentAddress._(bc, offset);
}

class TransparentAddressBuilder {
  TransparentAddressBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addAddrIndex(int? addrIndex) {
    fbBuilder.addUint32(0, addrIndex);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TransparentAddressObjectBuilder extends fb.ObjectBuilder {
  final int? _addrIndex;
  final String? _address;

  TransparentAddressObjectBuilder({
    int? addrIndex,
    String? address,
  })
      : _addrIndex = addrIndex,
        _address = address;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _addrIndex);
    fbBuilder.addOffset(1, addressOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IdNote {
  IdNote._(this._bc, this._bcOffset);

  static const fb.Reader<IdNote> reader = _IdNoteReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get pool => const fb.Uint8Reader().read(_bc, _bcOffset + 0);
  int get id => const fb.Uint32Reader().read(_bc, _bcOffset + 4);

  @override
  String toString() {
    return 'IdNote{pool: ${pool}, id: ${id}}';
  }

  IdNoteT unpack() => IdNoteT(
      pool: pool,
      id: id);

  static int pack(fb.Builder fbBuilder, IdNoteT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class IdNoteT implements fb.Packable {
  int pool;
  int id;

  IdNoteT({
      required this.pool,
      required this.id});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.putUint32(id);
    fbBuilder.pad(3);
    fbBuilder.putUint8(pool);
    return fbBuilder.offset;
  }

  @override
  String toString() {
    return 'IdNoteT{pool: ${pool}, id: ${id}}';
  }
}

class _IdNoteReader extends fb.StructReader<IdNote> {
  const _IdNoteReader();

  @override
  int get size => 8;

  @override
  IdNote createObject(fb.BufferContext bc, int offset) => 
    IdNote._(bc, offset);
}

class IdNoteBuilder {
  IdNoteBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(int pool, int id) {
    fbBuilder.putUint32(id);
    fbBuilder.pad(3);
    fbBuilder.putUint8(pool);
    return fbBuilder.offset;
  }

}

class IdNoteObjectBuilder extends fb.ObjectBuilder {
  final int _pool;
  final int _id;

  IdNoteObjectBuilder({
    required int pool,
    required int id,
  })
      : _pool = pool,
        _id = id;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putUint32(_id);
    fbBuilder.pad(3);
    fbBuilder.putUint8(_pool);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TransactionBytes {
  TransactionBytes._(this._bc, this._bcOffset);
  factory TransactionBytes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TransactionBytes> reader = _TransactionBytesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<IdNote>? get notes => const fb.ListReader<IdNote>(IdNote.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get data => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get redirect => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'TransactionBytes{notes: ${notes}, data: ${data}, redirect: ${redirect}}';
  }

  TransactionBytesT unpack() => TransactionBytesT(
      notes: notes?.map((e) => e.unpack()).toList(),
      data: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 6),
      redirect: redirect);

  static int pack(fb.Builder fbBuilder, TransactionBytesT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TransactionBytesT implements fb.Packable {
  List<IdNoteT>? notes;
  List<int>? data;
  String? redirect;

  TransactionBytesT({
      this.notes,
      this.data,
      this.redirect});

  @override
  int pack(fb.Builder fbBuilder) {
    int? notesOffset;
    if (notes != null) {
      for (var e in notes!) { e.pack(fbBuilder); }
      notesOffset = fbBuilder.endStructVector(notes!.length);
    }
    final int? dataOffset = data == null ? null
        : fbBuilder.writeListUint8(data!);
    final int? redirectOffset = redirect == null ? null
        : fbBuilder.writeString(redirect!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, notesOffset);
    fbBuilder.addOffset(1, dataOffset);
    fbBuilder.addOffset(2, redirectOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TransactionBytesT{notes: ${notes}, data: ${data}, redirect: ${redirect}}';
  }
}

class _TransactionBytesReader extends fb.TableReader<TransactionBytes> {
  const _TransactionBytesReader();

  @override
  TransactionBytes createObject(fb.BufferContext bc, int offset) => 
    TransactionBytes._(bc, offset);
}

class TransactionBytesBuilder {
  TransactionBytesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addRedirectOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TransactionBytesObjectBuilder extends fb.ObjectBuilder {
  final List<IdNoteObjectBuilder>? _notes;
  final List<int>? _data;
  final String? _redirect;

  TransactionBytesObjectBuilder({
    List<IdNoteObjectBuilder>? notes,
    List<int>? data,
    String? redirect,
  })
      : _notes = notes,
        _data = data,
        _redirect = redirect;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeListOfStructs(_notes!);
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeListUint8(_data!);
    final int? redirectOffset = _redirect == null ? null
        : fbBuilder.writeString(_redirect!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, notesOffset);
    fbBuilder.addOffset(1, dataOffset);
    fbBuilder.addOffset(2, redirectOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class UnconfirmedTx {
  UnconfirmedTx._(this._bc, this._bcOffset);
  factory UnconfirmedTx(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UnconfirmedTx> reader = _UnconfirmedTxReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get account => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<int>? get txid => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get amount => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'UnconfirmedTx{account: ${account}, txid: ${txid}, amount: ${amount}}';
  }

  UnconfirmedTxT unpack() => UnconfirmedTxT(
      account: account,
      txid: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 6),
      amount: amount);

  static int pack(fb.Builder fbBuilder, UnconfirmedTxT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class UnconfirmedTxT implements fb.Packable {
  int account;
  List<int>? txid;
  int amount;

  UnconfirmedTxT({
      this.account = 0,
      this.txid,
      this.amount = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? txidOffset = txid == null ? null
        : fbBuilder.writeListUint8(txid!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, account);
    fbBuilder.addOffset(1, txidOffset);
    fbBuilder.addInt64(2, amount);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'UnconfirmedTxT{account: ${account}, txid: ${txid}, amount: ${amount}}';
  }
}

class _UnconfirmedTxReader extends fb.TableReader<UnconfirmedTx> {
  const _UnconfirmedTxReader();

  @override
  UnconfirmedTx createObject(fb.BufferContext bc, int offset) => 
    UnconfirmedTx._(bc, offset);
}

class UnconfirmedTxBuilder {
  UnconfirmedTxBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addAccount(int? account) {
    fbBuilder.addUint32(0, account);
    return fbBuilder.offset;
  }
  int addTxidOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAmount(int? amount) {
    fbBuilder.addInt64(2, amount);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UnconfirmedTxObjectBuilder extends fb.ObjectBuilder {
  final int? _account;
  final List<int>? _txid;
  final int? _amount;

  UnconfirmedTxObjectBuilder({
    int? account,
    List<int>? txid,
    int? amount,
  })
      : _account = account,
        _txid = txid,
        _amount = amount;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? txidOffset = _txid == null ? null
        : fbBuilder.writeListUint8(_txid!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, _account);
    fbBuilder.addOffset(1, txidOffset);
    fbBuilder.addInt64(2, _amount);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
