// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  CResult_u8 c_add_contact(
    int coin,
    int account,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> address,
    int saved,
  ) {
    return _c_add_contact(
      coin,
      account,
      name,
      address,
      saved,
    );
  }

  late final _c_add_contactPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('c_add_contact');
  late final _c_add_contact = _c_add_contactPtr.asFunction<
      CResult_u8 Function(
          int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  CResult______u8 c_get_txs(
    int coin,
    int account,
    int bc_height,
  ) {
    return _c_get_txs(
      coin,
      account,
      bc_height,
    );
  }

  late final _c_get_txsPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(ffi.Int, ffi.Int, ffi.Int)>>('c_get_txs');
  late final _c_get_txs =
      _c_get_txsPtr.asFunction<CResult______u8 Function(int, int, int)>();

  CResult_u8 c_create_schema(
    int coin,
    ffi.Pointer<ffi.Char> _version,
  ) {
    return _c_create_schema(
      coin,
      _version,
    );
  }

  late final _c_create_schemaPtr = _lookup<
          ffi
          .NativeFunction<CResult_u8 Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'c_create_schema');
  late final _c_create_schema = _c_create_schemaPtr
      .asFunction<CResult_u8 Function(int, ffi.Pointer<ffi.Char>)>();

  CResult______u8 c_list_accounts(
    int coin,
  ) {
    return _c_list_accounts(
      coin,
    );
  }

  late final _c_list_accountsPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Int)>>(
          'c_list_accounts');
  late final _c_list_accounts =
      _c_list_accountsPtr.asFunction<CResult______u8 Function(int)>();

  CResult______u8 c_list_account_transparent_addresses(
    int coin,
    int account,
  ) {
    return _c_list_account_transparent_addresses(
      coin,
      account,
    );
  }

  late final _c_list_account_transparent_addressesPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int)>>(
          'c_list_account_transparent_addresses');
  late final _c_list_account_transparent_addresses =
      _c_list_account_transparent_addressesPtr
          .asFunction<CResult______u8 Function(int, int)>();

  CResult_u8 c_change_account_dindex(
    int coin,
    int account,
    int dindex,
  ) {
    return _c_change_account_dindex(
      coin,
      account,
      dindex,
    );
  }

  late final _c_change_account_dindexPtr = _lookup<
          ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_change_account_dindex');
  late final _c_change_account_dindex = _c_change_account_dindexPtr
      .asFunction<CResult_u8 Function(int, int, int)>();

  CResult______u8 c_get_balance(
    int coin,
    int account,
    int height,
  ) {
    return _c_get_balance(
      coin,
      account,
      height,
    );
  }

  late final _c_get_balancePtr = _lookup<
          ffi
          .NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_get_balance');
  late final _c_get_balance =
      _c_get_balancePtr.asFunction<CResult______u8 Function(int, int, int)>();

  CResult______u8 c_get_account_signing_capabilities(
    int coin,
    int account,
  ) {
    return _c_get_account_signing_capabilities(
      coin,
      account,
    );
  }

  late final _c_get_account_signing_capabilitiesPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int)>>(
          'c_get_account_signing_capabilities');
  late final _c_get_account_signing_capabilities =
      _c_get_account_signing_capabilitiesPtr
          .asFunction<CResult______u8 Function(int, int)>();

  CResult______u8 c_get_account_property(
    int coin,
    int account,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _c_get_account_property(
      coin,
      account,
      name,
    );
  }

  late final _c_get_account_propertyPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('c_get_account_property');
  late final _c_get_account_property = _c_get_account_propertyPtr
      .asFunction<CResult______u8 Function(int, int, ffi.Pointer<ffi.Char>)>();

  CResult_u8 c_set_account_property(
    int coin,
    int account,
    ffi.Pointer<ffi.Char> name,
    CParam value,
  ) {
    return _c_set_account_property(
      coin,
      account,
      name,
      value,
    );
  }

  late final _c_set_account_propertyPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>,
              CParam)>>('c_set_account_property');
  late final _c_set_account_property = _c_set_account_propertyPtr.asFunction<
      CResult_u8 Function(int, int, ffi.Pointer<ffi.Char>, CParam)>();

  CResult______u8 c_get_spendings(
    int coin,
    int account,
    int timestamp,
  ) {
    return _c_get_spendings(
      coin,
      account,
      timestamp,
    );
  }

  late final _c_get_spendingsPtr = _lookup<
          ffi
          .NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_get_spendings');
  late final _c_get_spendings =
      _c_get_spendingsPtr.asFunction<CResult______u8 Function(int, int, int)>();

  CResult______u8 c_get_spendable(
    int coin,
    int account,
    int height,
  ) {
    return _c_get_spendable(
      coin,
      account,
      height,
    );
  }

  late final _c_get_spendablePtr = _lookup<
          ffi
          .NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_get_spendable');
  late final _c_get_spendable =
      _c_get_spendablePtr.asFunction<CResult______u8 Function(int, int, int)>();

  CResult_bool c_is_valid_key(
    int coin,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _c_is_valid_key(
      coin,
      key,
    );
  }

  late final _c_is_valid_keyPtr = _lookup<
      ffi.NativeFunction<
          CResult_bool Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('c_is_valid_key');
  late final _c_is_valid_key = _c_is_valid_keyPtr
      .asFunction<CResult_bool Function(int, ffi.Pointer<ffi.Char>)>();

  CResult_u32 c_create_new_account(
    int coin,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> key,
    int acc_index,
    int birth,
    int pools,
    int is_new,
  ) {
    return _c_create_new_account(
      coin,
      name,
      key,
      acc_index,
      birth,
      pools,
      is_new,
    );
  }

  late final _c_create_new_accountPtr = _lookup<
      ffi.NativeFunction<
          CResult_u32 Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('c_create_new_account');
  late final _c_create_new_account = _c_create_new_accountPtr.asFunction<
      CResult_u32 Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          int, int, int, int)>();

  CResult_u8 c_hide_account(
    int coin,
    int account,
    int hidden,
  ) {
    return _c_hide_account(
      coin,
      account,
      hidden,
    );
  }

  late final _c_hide_accountPtr = _lookup<
          ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_hide_account');
  late final _c_hide_account =
      _c_hide_accountPtr.asFunction<CResult_u8 Function(int, int, int)>();

  CResult_u8 c_reorder_account(
    int coin,
    int account,
    int new_position,
  ) {
    return _c_reorder_account(
      coin,
      account,
      new_position,
    );
  }

  late final _c_reorder_accountPtr = _lookup<
          ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_reorder_account');
  late final _c_reorder_account =
      _c_reorder_accountPtr.asFunction<CResult_u8 Function(int, int, int)>();

  CResult_u8 c_edit_account_icon(
    int coin,
    int account,
    CParam image,
  ) {
    return _c_edit_account_icon(
      coin,
      account,
      image,
    );
  }

  late final _c_edit_account_iconPtr = _lookup<
          ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int, CParam)>>(
      'c_edit_account_icon');
  late final _c_edit_account_icon = _c_edit_account_iconPtr
      .asFunction<CResult_u8 Function(int, int, CParam)>();

  CResult_u32 c_new_transparent_address(
    int coin,
    int account,
  ) {
    return _c_new_transparent_address(
      coin,
      account,
    );
  }

  late final _c_new_transparent_addressPtr =
      _lookup<ffi.NativeFunction<CResult_u32 Function(ffi.Int, ffi.Int)>>(
          'c_new_transparent_address');
  late final _c_new_transparent_address = _c_new_transparent_addressPtr
      .asFunction<CResult_u32 Function(int, int)>();

  CResult_u8 c_edit_account_name(
    int coin,
    int account,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _c_edit_account_name(
      coin,
      account,
      name,
    );
  }

  late final _c_edit_account_namePtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('c_edit_account_name');
  late final _c_edit_account_name = _c_edit_account_namePtr
      .asFunction<CResult_u8 Function(int, int, ffi.Pointer<ffi.Char>)>();

  CResult_u8 c_edit_account_birth(
    int coin,
    int account,
    int birth,
  ) {
    return _c_edit_account_birth(
      coin,
      account,
      birth,
    );
  }

  late final _c_edit_account_birthPtr = _lookup<
          ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_edit_account_birth');
  late final _c_edit_account_birth =
      _c_edit_account_birthPtr.asFunction<CResult_u8 Function(int, int, int)>();

  CResult_u8 c_delete_account(
    int coin,
    int account,
  ) {
    return _c_delete_account(
      coin,
      account,
    );
  }

  late final _c_delete_accountPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int)>>(
          'c_delete_account');
  late final _c_delete_account =
      _c_delete_accountPtr.asFunction<CResult_u8 Function(int, int)>();

  CResult_u8 c_set_backup_reminder(
    int coin,
    int account,
    int saved,
  ) {
    return _c_set_backup_reminder(
      coin,
      account,
      saved,
    );
  }

  late final _c_set_backup_reminderPtr = _lookup<
          ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_set_backup_reminder');
  late final _c_set_backup_reminder = _c_set_backup_reminderPtr
      .asFunction<CResult_u8 Function(int, int, int)>();

  CResult_u8 c_downgrade_account(
    int coin,
    int account,
    CParam capabilities,
  ) {
    return _c_downgrade_account(
      coin,
      account,
      capabilities,
    );
  }

  late final _c_downgrade_accountPtr = _lookup<
          ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int, CParam)>>(
      'c_downgrade_account');
  late final _c_downgrade_account = _c_downgrade_accountPtr
      .asFunction<CResult_u8 Function(int, int, CParam)>();

  CResult______u8 c_get_sync_height(
    int coin,
  ) {
    return _c_get_sync_height(
      coin,
    );
  }

  late final _c_get_sync_heightPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Int)>>(
          'c_get_sync_height');
  late final _c_get_sync_height =
      _c_get_sync_heightPtr.asFunction<CResult______u8 Function(int)>();

  CResult_u8 c_rewind(
    int coin,
    int height,
  ) {
    return _c_rewind(
      coin,
      height,
    );
  }

  late final _c_rewindPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int)>>(
          'c_rewind');
  late final _c_rewind =
      _c_rewindPtr.asFunction<CResult_u8 Function(int, int)>();

  CResult______u8 c_list_checkpoints(
    int coin,
  ) {
    return _c_list_checkpoints(
      coin,
    );
  }

  late final _c_list_checkpointsPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Int)>>(
          'c_list_checkpoints');
  late final _c_list_checkpoints =
      _c_list_checkpointsPtr.asFunction<CResult______u8 Function(int)>();

  CResult_u8 c_purge_checkpoints(
    int coin,
    int min_height,
  ) {
    return _c_purge_checkpoints(
      coin,
      min_height,
    );
  }

  late final _c_purge_checkpointsPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int)>>(
          'c_purge_checkpoints');
  late final _c_purge_checkpoints =
      _c_purge_checkpointsPtr.asFunction<CResult_u8 Function(int, int)>();

  CResult_u32 c_store_contact(
    int coin,
    CParam contact,
  ) {
    return _c_store_contact(
      coin,
      contact,
    );
  }

  late final _c_store_contactPtr =
      _lookup<ffi.NativeFunction<CResult_u32 Function(ffi.Int, CParam)>>(
          'c_store_contact');
  late final _c_store_contact =
      _c_store_contactPtr.asFunction<CResult_u32 Function(int, CParam)>();

  CResult______u8 c_list_contact_cards(
    int coin,
  ) {
    return _c_list_contact_cards(
      coin,
    );
  }

  late final _c_list_contact_cardsPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Int)>>(
          'c_list_contact_cards');
  late final _c_list_contact_cards =
      _c_list_contact_cardsPtr.asFunction<CResult______u8 Function(int)>();

  CResult______u8 c_get_contact_card(
    int coin,
    int id,
  ) {
    return _c_get_contact_card(
      coin,
      id,
    );
  }

  late final _c_get_contact_cardPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int)>>(
          'c_get_contact_card');
  late final _c_get_contact_card =
      _c_get_contact_cardPtr.asFunction<CResult______u8 Function(int, int)>();

  CResult_u8 c_edit_contact_name(
    int coin,
    int id,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _c_edit_contact_name(
      coin,
      id,
      name,
    );
  }

  late final _c_edit_contact_namePtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('c_edit_contact_name');
  late final _c_edit_contact_name = _c_edit_contact_namePtr
      .asFunction<CResult_u8 Function(int, int, ffi.Pointer<ffi.Char>)>();

  CResult_u8 c_edit_contact_address(
    int coin,
    int id,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _c_edit_contact_address(
      coin,
      id,
      address,
    );
  }

  late final _c_edit_contact_addressPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('c_edit_contact_address');
  late final _c_edit_contact_address = _c_edit_contact_addressPtr
      .asFunction<CResult_u8 Function(int, int, ffi.Pointer<ffi.Char>)>();

  CResult_u8 c_delete_contact(
    int coin,
    int id,
  ) {
    return _c_delete_contact(
      coin,
      id,
    );
  }

  late final _c_delete_contactPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int)>>(
          'c_delete_contact');
  late final _c_delete_contact =
      _c_delete_contactPtr.asFunction<CResult_u8 Function(int, int)>();

  CResult_u8 c_on_contacts_saved(
    int coin,
    int account,
  ) {
    return _c_on_contacts_saved(
      coin,
      account,
    );
  }

  late final _c_on_contacts_savedPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int)>>(
          'c_on_contacts_saved');
  late final _c_on_contacts_saved =
      _c_on_contacts_savedPtr.asFunction<CResult_u8 Function(int, int)>();

  CResult______u8 c_list_unconfirmed_txs(
    int coin,
    int account,
  ) {
    return _c_list_unconfirmed_txs(
      coin,
      account,
    );
  }

  late final _c_list_unconfirmed_txsPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int)>>(
          'c_list_unconfirmed_txs');
  late final _c_list_unconfirmed_txs = _c_list_unconfirmed_txsPtr
      .asFunction<CResult______u8 Function(int, int)>();

  CResult_i64 c_get_unconfirmed_balance(
    int coin,
    int account,
  ) {
    return _c_get_unconfirmed_balance(
      coin,
      account,
    );
  }

  late final _c_get_unconfirmed_balancePtr =
      _lookup<ffi.NativeFunction<CResult_i64 Function(ffi.Int, ffi.Int)>>(
          'c_get_unconfirmed_balance');
  late final _c_get_unconfirmed_balance = _c_get_unconfirmed_balancePtr
      .asFunction<CResult_i64 Function(int, int)>();

  CResult______u8 c_list_messages(
    int coin,
    int account,
  ) {
    return _c_list_messages(
      coin,
      account,
    );
  }

  late final _c_list_messagesPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int)>>(
          'c_list_messages');
  late final _c_list_messages =
      _c_list_messagesPtr.asFunction<CResult______u8 Function(int, int)>();

  CResult_u8 c_mark_all_read(
    int coin,
    int account,
    int reverse,
  ) {
    return _c_mark_all_read(
      coin,
      account,
      reverse,
    );
  }

  late final _c_mark_all_readPtr = _lookup<
          ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_mark_all_read');
  late final _c_mark_all_read =
      _c_mark_all_readPtr.asFunction<CResult_u8 Function(int, int, int)>();

  CResult_u8 c_mark_read(
    int coin,
    int id,
    int reverse,
  ) {
    return _c_mark_read(
      coin,
      id,
      reverse,
    );
  }

  late final _c_mark_readPtr = _lookup<
          ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_mark_read');
  late final _c_mark_read =
      _c_mark_readPtr.asFunction<CResult_u8 Function(int, int, int)>();

  CResult______u8 c_get_unspent_notes(
    int coin,
    int account,
    int bc_height,
  ) {
    return _c_get_unspent_notes(
      coin,
      account,
      bc_height,
    );
  }

  late final _c_get_unspent_notesPtr = _lookup<
          ffi
          .NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_get_unspent_notes');
  late final _c_get_unspent_notes = _c_get_unspent_notesPtr
      .asFunction<CResult______u8 Function(int, int, int)>();

  CResult______u8 c_get_unspent_utxos(
    int coin,
    int account,
    int bc_height,
  ) {
    return _c_get_unspent_utxos(
      coin,
      account,
      bc_height,
    );
  }

  late final _c_get_unspent_utxosPtr = _lookup<
          ffi
          .NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_get_unspent_utxos');
  late final _c_get_unspent_utxos = _c_get_unspent_utxosPtr
      .asFunction<CResult______u8 Function(int, int, int)>();

  CResult_u8 c_exclude_note(
    int coin,
    int id,
    int reverse,
  ) {
    return _c_exclude_note(
      coin,
      id,
      reverse,
    );
  }

  late final _c_exclude_notePtr = _lookup<
          ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_exclude_note');
  late final _c_exclude_note =
      _c_exclude_notePtr.asFunction<CResult_u8 Function(int, int, int)>();

  CResult_u8 c_reverse_note_exclusion(
    int coin,
    int account,
  ) {
    return _c_reverse_note_exclusion(
      coin,
      account,
    );
  }

  late final _c_reverse_note_exclusionPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int)>>(
          'c_reverse_note_exclusion');
  late final _c_reverse_note_exclusion =
      _c_reverse_note_exclusionPtr.asFunction<CResult_u8 Function(int, int)>();

  CResult_u8 c_store_swap(
    int coin,
    int account,
    CParam swap,
  ) {
    return _c_store_swap(
      coin,
      account,
      swap,
    );
  }

  late final _c_store_swapPtr = _lookup<
          ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int, CParam)>>(
      'c_store_swap');
  late final _c_store_swap =
      _c_store_swapPtr.asFunction<CResult_u8 Function(int, int, CParam)>();

  CResult______u8 c_list_swaps(
    int coin,
    int account,
  ) {
    return _c_list_swaps(
      coin,
      account,
    );
  }

  late final _c_list_swapsPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int)>>(
          'c_list_swaps');
  late final _c_list_swaps =
      _c_list_swapsPtr.asFunction<CResult______u8 Function(int, int)>();

  CResult_u8 c_clear_swap_history(
    int coin,
    int account,
  ) {
    return _c_clear_swap_history(
      coin,
      account,
    );
  }

  late final _c_clear_swap_historyPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int)>>(
          'c_clear_swap_history');
  late final _c_clear_swap_history =
      _c_clear_swap_historyPtr.asFunction<CResult_u8 Function(int, int)>();

  CResult______u8 c_get_tx_details(
    int coin,
    int account,
    CParam txid,
  ) {
    return _c_get_tx_details(
      coin,
      account,
      txid,
    );
  }

  late final _c_get_tx_detailsPtr = _lookup<
          ffi
          .NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int, CParam)>>(
      'c_get_tx_details');
  late final _c_get_tx_details = _c_get_tx_detailsPtr
      .asFunction<CResult______u8 Function(int, int, CParam)>();

  CResult_____c_char c_generate_random_mnemonic_phrase_os_rng() {
    return _c_generate_random_mnemonic_phrase_os_rng();
  }

  late final _c_generate_random_mnemonic_phrase_os_rngPtr =
      _lookup<ffi.NativeFunction<CResult_____c_char Function()>>(
          'c_generate_random_mnemonic_phrase_os_rng');
  late final _c_generate_random_mnemonic_phrase_os_rng =
      _c_generate_random_mnemonic_phrase_os_rngPtr
          .asFunction<CResult_____c_char Function()>();

  CResult_u32 c_get_last_height(
    int coin,
  ) {
    return _c_get_last_height(
      coin,
    );
  }

  late final _c_get_last_heightPtr =
      _lookup<ffi.NativeFunction<CResult_u32 Function(ffi.Int)>>(
          'c_get_last_height');
  late final _c_get_last_height =
      _c_get_last_heightPtr.asFunction<CResult_u32 Function(int)>();

  CResult_u64 c_ping(
    int coin,
    ffi.Pointer<ffi.Char> lwd_url,
  ) {
    return _c_ping(
      coin,
      lwd_url,
    );
  }

  late final _c_pingPtr = _lookup<
      ffi.NativeFunction<
          CResult_u64 Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('c_ping');
  late final _c_ping =
      _c_pingPtr.asFunction<CResult_u64 Function(int, ffi.Pointer<ffi.Char>)>();

  CResult_u8 c_init_sapling_prover(
    CParam spend,
    CParam output,
  ) {
    return _c_init_sapling_prover(
      spend,
      output,
    );
  }

  late final _c_init_sapling_proverPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(CParam, CParam)>>(
          'c_init_sapling_prover');
  late final _c_init_sapling_prover = _c_init_sapling_proverPtr
      .asFunction<CResult_u8 Function(CParam, CParam)>();

  CResult_u8 c_scan_transparent_addresses(
    int coin,
    int account,
    int external1,
    int gap_limit,
  ) {
    return _c_scan_transparent_addresses(
      coin,
      account,
      external1,
      gap_limit,
    );
  }

  late final _c_scan_transparent_addressesPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('c_scan_transparent_addresses');
  late final _c_scan_transparent_addresses = _c_scan_transparent_addressesPtr
      .asFunction<CResult_u8 Function(int, int, int, int)>();

  CResult_u8 c_retrieve_tx_details(
    int coin,
  ) {
    return _c_retrieve_tx_details(
      coin,
    );
  }

  late final _c_retrieve_tx_detailsPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Int)>>(
          'c_retrieve_tx_details');
  late final _c_retrieve_tx_details =
      _c_retrieve_tx_detailsPtr.asFunction<CResult_u8 Function(int)>();

  void c_setup() {
    return _c_setup();
  }

  late final _c_setupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('c_setup');
  late final _c_setup = _c_setupPtr.asFunction<void Function()>();

  CResult_u8 c_configure(
    int coin,
    CParam config,
  ) {
    return _c_configure(
      coin,
      config,
    );
  }

  late final _c_configurePtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Int, CParam)>>(
          'c_configure');
  late final _c_configure =
      _c_configurePtr.asFunction<CResult_u8 Function(int, CParam)>();

  CResult_u32 c_get_activation_date(
    int coin,
  ) {
    return _c_get_activation_date(
      coin,
    );
  }

  late final _c_get_activation_datePtr =
      _lookup<ffi.NativeFunction<CResult_u32 Function(ffi.Int)>>(
          'c_get_activation_date');
  late final _c_get_activation_date =
      _c_get_activation_datePtr.asFunction<CResult_u32 Function(int)>();

  CResult_u32 c_get_height_by_time(
    int coin,
    int time,
  ) {
    return _c_get_height_by_time(
      coin,
      time,
    );
  }

  late final _c_get_height_by_timePtr =
      _lookup<ffi.NativeFunction<CResult_u32 Function(ffi.Int, ffi.Int)>>(
          'c_get_height_by_time');
  late final _c_get_height_by_time =
      _c_get_height_by_timePtr.asFunction<CResult_u32 Function(int, int)>();

  CResult_u32 c_get_activation_height(
    int coin,
  ) {
    return _c_get_activation_height(
      coin,
    );
  }

  late final _c_get_activation_heightPtr =
      _lookup<ffi.NativeFunction<CResult_u32 Function(ffi.Int)>>(
          'c_get_activation_height');
  late final _c_get_activation_height =
      _c_get_activation_heightPtr.asFunction<CResult_u32 Function(int)>();

  CResult_u32 c_get_time_by_height(
    int coin,
    int height,
  ) {
    return _c_get_time_by_height(
      coin,
      height,
    );
  }

  late final _c_get_time_by_heightPtr =
      _lookup<ffi.NativeFunction<CResult_u32 Function(ffi.Int, ffi.Int)>>(
          'c_get_time_by_height');
  late final _c_get_time_by_height =
      _c_get_time_by_heightPtr.asFunction<CResult_u32 Function(int, int)>();

  CResult_u8 c_reset_chain(
    int coin,
    int height,
  ) {
    return _c_reset_chain(
      coin,
      height,
    );
  }

  late final _c_reset_chainPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int)>>(
          'c_reset_chain');
  late final _c_reset_chain =
      _c_reset_chainPtr.asFunction<CResult_u8 Function(int, int)>();

  CResult______u8 c_split(
    CParam data,
    int threshold,
  ) {
    return _c_split(
      data,
      threshold,
    );
  }

  late final _c_splitPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(CParam, ffi.Int)>>(
          'c_split');
  late final _c_split =
      _c_splitPtr.asFunction<CResult______u8 Function(CParam, int)>();

  CResult______u8 c_merge(
    CParam parts,
  ) {
    return _c_merge(
      parts,
    );
  }

  late final _c_mergePtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(CParam)>>('c_merge');
  late final _c_merge =
      _c_mergePtr.asFunction<CResult______u8 Function(CParam)>();

  CResult_u8 c_check_db_password(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _c_check_db_password(
      path,
      password,
    );
  }

  late final _c_check_db_passwordPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('c_check_db_password');
  late final _c_check_db_password = _c_check_db_passwordPtr.asFunction<
      CResult_u8 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  CResult_u8 c_encrypt_db(
    int coin,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Char> new_db_path,
  ) {
    return _c_encrypt_db(
      coin,
      password,
      new_db_path,
    );
  }

  late final _c_encrypt_dbPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('c_encrypt_db');
  late final _c_encrypt_db = _c_encrypt_dbPtr.asFunction<
      CResult_u8 Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  CResult______u8 c_create_backup(
    int coin,
    int account,
  ) {
    return _c_create_backup(
      coin,
      account,
    );
  }

  late final _c_create_backupPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int)>>(
          'c_create_backup');
  late final _c_create_backup =
      _c_create_backupPtr.asFunction<CResult______u8 Function(int, int)>();

  CResult_____c_char c_get_address(
    int coin,
    int account,
    int time,
    int mask,
  ) {
    return _c_get_address(
      coin,
      account,
      time,
      mask,
    );
  }

  late final _c_get_addressPtr = _lookup<
      ffi.NativeFunction<
          CResult_____c_char Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('c_get_address');
  late final _c_get_address = _c_get_addressPtr
      .asFunction<CResult_____c_char Function(int, int, int, int)>();

  CResult_u8 c_set_db_path_password(
    int coin,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _c_set_db_path_password(
      coin,
      path,
      password,
    );
  }

  late final _c_set_db_path_passwordPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('c_set_db_path_password');
  late final _c_set_db_path_password = _c_set_db_path_passwordPtr.asFunction<
      CResult_u8 Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int c_schema_version() {
    return _c_schema_version();
  }

  late final _c_schema_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('c_schema_version');
  late final _c_schema_version =
      _c_schema_versionPtr.asFunction<int Function()>();

  CResult_u8 c_create_db(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Char> version,
  ) {
    return _c_create_db(
      path,
      password,
      version,
    );
  }

  late final _c_create_dbPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('c_create_db');
  late final _c_create_db = _c_create_dbPtr.asFunction<
      CResult_u8 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  CResult______u8 c_derive_zip32_keys(
    int coin,
    int account,
    int acc_index,
    int addr_index,
    int use_default,
  ) {
    return _c_derive_zip32_keys(
      coin,
      account,
      acc_index,
      addr_index,
      use_default,
    );
  }

  late final _c_derive_zip32_keysPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('c_derive_zip32_keys');
  late final _c_derive_zip32_keys = _c_derive_zip32_keysPtr
      .asFunction<CResult______u8 Function(int, int, int, int, int)>();

  CResult______u8 c_prev_message(
    int coin,
    int account,
    int height,
  ) {
    return _c_prev_message(
      coin,
      account,
      height,
    );
  }

  late final _c_prev_messagePtr = _lookup<
          ffi
          .NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_prev_message');
  late final _c_prev_message =
      _c_prev_messagePtr.asFunction<CResult______u8 Function(int, int, int)>();

  CResult______u8 c_next_message(
    int coin,
    int account,
    int height,
  ) {
    return _c_next_message(
      coin,
      account,
      height,
    );
  }

  late final _c_next_messagePtr = _lookup<
          ffi
          .NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_next_message');
  late final _c_next_message =
      _c_next_messagePtr.asFunction<CResult______u8 Function(int, int, int)>();

  CResult______u8 c_prev_message_thread(
    int coin,
    int account,
    int height,
    ffi.Pointer<ffi.Char> subject,
  ) {
    return _c_prev_message_thread(
      coin,
      account,
      height,
      subject,
    );
  }

  late final _c_prev_message_threadPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('c_prev_message_thread');
  late final _c_prev_message_thread = _c_prev_message_threadPtr.asFunction<
      CResult______u8 Function(int, int, int, ffi.Pointer<ffi.Char>)>();

  CResult______u8 c_next_message_thread(
    int coin,
    int account,
    int height,
    ffi.Pointer<ffi.Char> subject,
  ) {
    return _c_next_message_thread(
      coin,
      account,
      height,
      subject,
    );
  }

  late final _c_next_message_threadPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('c_next_message_thread');
  late final _c_next_message_thread = _c_next_message_threadPtr.asFunction<
      CResult______u8 Function(int, int, int, ffi.Pointer<ffi.Char>)>();

  CResult______u8 c_prepare_payment(
    int coin,
    int account,
    CParam payment,
    ffi.Pointer<ffi.Char> redirect,
  ) {
    return _c_prepare_payment(
      coin,
      account,
      payment,
      redirect,
    );
  }

  late final _c_prepare_paymentPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(ffi.Int, ffi.Int, CParam,
              ffi.Pointer<ffi.Char>)>>('c_prepare_payment');
  late final _c_prepare_payment = _c_prepare_paymentPtr.asFunction<
      CResult______u8 Function(int, int, CParam, ffi.Pointer<ffi.Char>)>();

  CResult_bool c_can_sign(
    int coin,
    int account,
    CParam summary,
  ) {
    return _c_can_sign(
      coin,
      account,
      summary,
    );
  }

  late final _c_can_signPtr = _lookup<
          ffi.NativeFunction<CResult_bool Function(ffi.Int, ffi.Int, CParam)>>(
      'c_can_sign');
  late final _c_can_sign =
      _c_can_signPtr.asFunction<CResult_bool Function(int, int, CParam)>();

  CResult______u8 c_sign(
    int coin,
    CParam summary,
    int expiration_height,
  ) {
    return _c_sign(
      coin,
      summary,
      expiration_height,
    );
  }

  late final _c_signPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(ffi.Int, CParam, ffi.Int)>>('c_sign');
  late final _c_sign =
      _c_signPtr.asFunction<CResult______u8 Function(int, CParam, int)>();

  CResult_____c_char c_tx_broadcast(
    int coin,
    CParam txbytes,
  ) {
    return _c_tx_broadcast(
      coin,
      txbytes,
    );
  }

  late final _c_tx_broadcastPtr =
      _lookup<ffi.NativeFunction<CResult_____c_char Function(ffi.Int, CParam)>>(
          'c_tx_broadcast');
  late final _c_tx_broadcast =
      _c_tx_broadcastPtr.asFunction<CResult_____c_char Function(int, CParam)>();

  CResult______u8 c_save_contacts(
    int coin,
    int account,
    int height,
    ffi.Pointer<ffi.Char> redirect,
  ) {
    return _c_save_contacts(
      coin,
      account,
      height,
      redirect,
    );
  }

  late final _c_save_contactsPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('c_save_contacts');
  late final _c_save_contacts = _c_save_contactsPtr.asFunction<
      CResult______u8 Function(int, int, int, ffi.Pointer<ffi.Char>)>();

  CResult______u8 c_fetch_tx_details(
    int coin,
    int account,
    int id,
  ) {
    return _c_fetch_tx_details(
      coin,
      account,
      id,
    );
  }

  late final _c_fetch_tx_detailsPtr = _lookup<
          ffi
          .NativeFunction<CResult______u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_fetch_tx_details');
  late final _c_fetch_tx_details = _c_fetch_tx_detailsPtr
      .asFunction<CResult______u8 Function(int, int, int)>();

  CResult______u8 c_decode_address(
    int coin,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _c_decode_address(
      coin,
      address,
    );
  }

  late final _c_decode_addressPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('c_decode_address');
  late final _c_decode_address = _c_decode_addressPtr
      .asFunction<CResult______u8 Function(int, ffi.Pointer<ffi.Char>)>();

  CResult_____c_char c_filter_address(
    int coin,
    ffi.Pointer<ffi.Char> address,
    int pool_mask,
  ) {
    return _c_filter_address(
      coin,
      address,
      pool_mask,
    );
  }

  late final _c_filter_addressPtr = _lookup<
      ffi.NativeFunction<
          CResult_____c_char Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('c_filter_address');
  late final _c_filter_address = _c_filter_addressPtr.asFunction<
      CResult_____c_char Function(int, ffi.Pointer<ffi.Char>, int)>();

  CResult_____c_char c_make_payment_uri(
    int coin,
    CParam payment,
  ) {
    return _c_make_payment_uri(
      coin,
      payment,
    );
  }

  late final _c_make_payment_uriPtr =
      _lookup<ffi.NativeFunction<CResult_____c_char Function(ffi.Int, CParam)>>(
          'c_make_payment_uri');
  late final _c_make_payment_uri = _c_make_payment_uriPtr
      .asFunction<CResult_____c_char Function(int, CParam)>();

  CResult______u8 c_parse_payment_uri(
    int coin,
    ffi.Pointer<ffi.Char> uri,
    int height,
    int expiration,
  ) {
    return _c_parse_payment_uri(
      coin,
      uri,
      height,
      expiration,
    );
  }

  late final _c_parse_payment_uriPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('c_parse_payment_uri');
  late final _c_parse_payment_uri = _c_parse_payment_uriPtr.asFunction<
      CResult______u8 Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  CResult_u8 c_is_valid_address_or_uri(
    int coin,
    ffi.Pointer<ffi.Char> s,
  ) {
    return _c_is_valid_address_or_uri(
      coin,
      s,
    );
  }

  late final _c_is_valid_address_or_uriPtr = _lookup<
          ffi
          .NativeFunction<CResult_u8 Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'c_is_valid_address_or_uri');
  late final _c_is_valid_address_or_uri = _c_is_valid_address_or_uriPtr
      .asFunction<CResult_u8 Function(int, ffi.Pointer<ffi.Char>)>();

  CResult_u8 c_encrypt_zip_database_files(
    CParam zip_db_config,
  ) {
    return _c_encrypt_zip_database_files(
      zip_db_config,
    );
  }

  late final _c_encrypt_zip_database_filesPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(CParam)>>(
          'c_encrypt_zip_database_files');
  late final _c_encrypt_zip_database_files = _c_encrypt_zip_database_filesPtr
      .asFunction<CResult_u8 Function(CParam)>();

  CResult_u8 c_decrypt_zip_database_files(
    ffi.Pointer<ffi.Char> file_path,
    ffi.Pointer<ffi.Char> target_directory,
    ffi.Pointer<ffi.Char> secret_key,
  ) {
    return _c_decrypt_zip_database_files(
      file_path,
      target_directory,
      secret_key,
    );
  }

  late final _c_decrypt_zip_database_filesPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('c_decrypt_zip_database_files');
  late final _c_decrypt_zip_database_files =
      _c_decrypt_zip_database_filesPtr.asFunction<
          CResult_u8 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  CResult______u8 c_generate_zip_database_keys() {
    return _c_generate_zip_database_keys();
  }

  late final _c_generate_zip_database_keysPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function()>>(
          'c_generate_zip_database_keys');
  late final _c_generate_zip_database_keys =
      _c_generate_zip_database_keysPtr.asFunction<CResult______u8 Function()>();

  CResult_u8 c_mempool_run(
    int coin,
  ) {
    return _c_mempool_run(
      coin,
    );
  }

  late final _c_mempool_runPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Int)>>(
          'c_mempool_run');
  late final _c_mempool_run =
      _c_mempool_runPtr.asFunction<CResult_u8 Function(int)>();

  CResult_u8 c_mempool_set_account(
    int coin,
    int account,
  ) {
    return _c_mempool_set_account(
      coin,
      account,
    );
  }

  late final _c_mempool_set_accountPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int)>>(
          'c_mempool_set_account');
  late final _c_mempool_set_account =
      _c_mempool_set_accountPtr.asFunction<CResult_u8 Function(int, int)>();

  CResult_u8 c_download_warp_blocks(
    int coin,
    ffi.Pointer<ffi.Char> warp_url,
    int end,
    ffi.Pointer<ffi.Char> dest,
  ) {
    return _c_download_warp_blocks(
      coin,
      warp_url,
      end,
      dest,
    );
  }

  late final _c_download_warp_blocksPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('c_download_warp_blocks');
  late final _c_download_warp_blocks = _c_download_warp_blocksPtr.asFunction<
      CResult_u8 Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  CResult_u8 c_warp_synchronize(
    int coin,
    int end_height,
  ) {
    return _c_warp_synchronize(
      coin,
      end_height,
    );
  }

  late final _c_warp_synchronizePtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int)>>(
          'c_warp_synchronize');
  late final _c_warp_synchronize =
      _c_warp_synchronizePtr.asFunction<CResult_u8 Function(int, int)>();

  CResult_u8 c_warp_synchronize_from_file(
    int coin,
    ffi.Pointer<ffi.Char> file,
  ) {
    return _c_warp_synchronize_from_file(
      coin,
      file,
    );
  }

  late final _c_warp_synchronize_from_filePtr = _lookup<
          ffi
          .NativeFunction<CResult_u8 Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'c_warp_synchronize_from_file');
  late final _c_warp_synchronize_from_file = _c_warp_synchronize_from_filePtr
      .asFunction<CResult_u8 Function(int, ffi.Pointer<ffi.Char>)>();

  CResult_u8 c_transparent_scan(
    int coin,
    int account,
    int end_height,
  ) {
    return _c_transparent_scan(
      coin,
      account,
      end_height,
    );
  }

  late final _c_transparent_scanPtr = _lookup<
          ffi.NativeFunction<CResult_u8 Function(ffi.Int, ffi.Int, ffi.Int)>>(
      'c_transparent_scan');
  late final _c_transparent_scan =
      _c_transparent_scanPtr.asFunction<CResult_u8 Function(int, int, int)>();
}

final class CResult_u8 extends ffi.Struct {
  @ffi.Int()
  external int value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Int()
  external int len;
}

final class CResult______u8 extends ffi.Struct {
  external ffi.Pointer<ffi.Int> value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Int()
  external int len;
}

final class CParam extends ffi.Struct {
  external ffi.Pointer<ffi.Int> value;

  @ffi.Int()
  external int len;
}

final class CResult_bool extends ffi.Struct {
  @ffi.Int()
  external int value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Int()
  external int len;
}

final class CResult_u32 extends ffi.Struct {
  @ffi.Int()
  external int value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Int()
  external int len;
}

final class CResult_i64 extends ffi.Struct {
  @ffi.Int()
  external int value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Int()
  external int len;
}

final class CResult_____c_char extends ffi.Struct {
  external ffi.Pointer<ffi.Char> value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Int()
  external int len;
}

final class CResult_u64 extends ffi.Struct {
  @ffi.Int()
  external int value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Int()
  external int len;
}
